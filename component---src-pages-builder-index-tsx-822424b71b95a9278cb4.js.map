{"version":3,"file":"component---src-pages-builder-index-tsx-822424b71b95a9278cb4.js","mappings":"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","sources":["webpack://slap-kommerce-web/./src/tables/tables.ts","webpack://slap-kommerce-web/./src/components/Layout.tsx","webpack://slap-kommerce-web/./src/pages/builder/index.tsx"],"sourcesContent":["import { supabase } from '../supabase';\n\nexport async function fetchPriceItems() {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('uid, name, sku, bulk, carton');\n\n  if (error) {\n    console.error('Error fetching price items:', error.message);\n    return [];\n  }\n\n  return data.map(item => ({\n    uid: item.uid,\n    item: item.name,\n    sku: item.sku,\n    bulk: parseFloat(item.bulk),\n    carton: parseInt(item.carton),\n    qty: 1,\n    sell: 0\n  }));\n}\n\nexport async function fetchSupplyLists(): Promise<string[]> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .order('list_name', { ascending: true });\n\n  if (error) {\n    console.error('Error fetching list names from meta:', error.message);\n    return [];\n  }\n\n  return data.map(row => row.list_name);\n}\n\n\n\nexport async function fetchSupplyListDetails(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list')\n    .select(`\n      quantity,\n      sell,\n      item:price_items (\n        uid,\n        name,\n        sku,\n        bulk,\n        carton\n      )\n    `)\n    .eq('list_name', listName);\n\n  if (error) {\n    console.error('Error fetching supply list details:', error.message);\n    return { items: [], meta: null };\n  }\n\n  const items = (data || []).map(row => {\n    const costEa = parseFloat(row.item.bulk) / row.item.carton;\n    const sell = parseFloat(row.sell ?? 0);\n    const qty = row.quantity ?? 1;\n    const profit = (sell - costEa) * qty;\n\n    return {\n      uid: row.item.uid,\n      item: row.item.name,\n      sku: row.item.sku,\n      bulk: parseFloat(row.item.bulk),\n      carton: row.item.carton,\n      costEa,\n      qty,                 // ✅ Important: use 'qty' not 'quantity'\n      sell,\n      profit\n    };\n  });\n\n  const { data: metaData, error: metaError } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (metaError) {\n    console.error('Error fetching supply list meta:', metaError.message);\n  }\n\n  return {\n    items,\n    meta: metaData || null\n  };\n}\n\n\nexport async function saveSupplyListItems(listName: string, items: any[], upsert = false) {\n  // Convert to valid rows with required fields\n  const rows = (items || [])\n    .filter(i => i.uid && typeof i.qty === 'number' && typeof i.sell === 'number')\n    .map(i => ({\n      list_name: listName,\n      item_uid: i.uid, // ✅ match schema field\n      quantity: i.qty > 0 ? i.qty : 1,\n      sell: isNaN(i.sell) ? 0 : parseFloat(i.sell)\n    }));\n\n  if (rows.length === 0) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = upsert\n    ? await supabase\n        .from('supply_list')\n        .upsert(rows, { onConflict: ['list_name', 'item_uid'] })\n    : await supabase\n        .from('supply_list')\n        .insert(rows);\n\n  if (error) {\n    console.error(`❌ Error ${upsert ? 'upserting' : 'inserting'} supply list items:`, error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\n\n\n\nexport async function editSupplyListItems(listName: string, items: any[], overwrite = true) {\n  if (!items.length) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = await supabase\n    .from('supply_list')\n    .upsert(items, { onConflict: ['list_name', 'item_uid'] });\n\n  if (error) {\n    console.error('❌ Supabase upsert error:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\nexport async function saveSupplyListMeta(listName: string, margin: number, shipping: number) {\n  const { error } = await supabase\n    .from('supply_list_meta')\n    .upsert(\n      [{ list_name: listName, margin, shipping_rate: shipping }],\n      { onConflict: ['list_name'] }\n    );\n\n  if (error) {\n    console.error('❌ Supabase error saving supply_list_meta:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\nexport async function checkListNameExists(listName: string): Promise<boolean> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .eq('list_name', listName)\n    .limit(1);\n\n  if (error) {\n    console.error('Error checking list name:', error.message);\n    return false;\n  }\n\n  return !!(data && data.length > 0);\n}\n\nexport async function fetchSupplyListMeta(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (error) {\n    console.error('Error fetching supply list meta:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function deleteSupplyList(listName: string) {\n  const { error: itemError } = await supabase\n    .from('supply_list')\n    .delete()\n    .eq('list_name', listName);\n\n  const { error: metaError } = await supabase\n    .from('supply_list_meta')\n    .delete()\n    .eq('list_name', listName);\n\n  if (itemError || metaError) {\n    console.error('❌ Failed to delete list:', itemError?.message || metaError?.message);\n    return false;\n  }\n\n  return true;\n}\n","// src/components/Layout.tsx\nimport React, { ReactNode } from 'react';\nimport { Link } from 'gatsby';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst Layout = ({ children }: LayoutProps) => (\n  <>\n    <nav\n      style={{\n        display: 'flex',\n        gap: '1rem',\n        padding: '10px',\n        background: '#f0f0f0',\n        borderBottom: '1px solid #ccc',\n        flexWrap: 'wrap',\n      }}\n    >\n      {/* <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Original</Link> */}\n      <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Lists</Link> \n      <Link to=\"/builder\">📥 New</Link>\n      <Link to=\"/bottom-line\">📤 Average Profit Margin</Link>\n    </nav>\n    <main style={{ padding: '20px' }}>{children}</main>\n  </>\n);\n\nexport default Layout;\n","import React, { useEffect, useState } from 'react';\nimport {\n  fetchPriceItems,\n  checkListNameExists,\n  saveSupplyListMeta,\n  saveSupplyListItems\n} from '../../tables/tables';\nimport Layout from '../../components/Layout';\n\nexport default function ListBuilder() {\n  const [items, setItems] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [listName, setListName] = useState('');\n  const [desiredMargin, setDesiredMargin] = useState(40);\n  const [shippingRate, setShippingRate] = useState(17);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [marginDialogOpen, setMarginDialogOpen] = useState(false);\n  const [marginInput, setMarginInput] = useState(30);\n\n  useEffect(() => {\n    fetchPriceItems().then(data => {\n      const initialized = data.map(item => {\n        const costEa = item.bulk / item.carton;\n        return {\n          ...item,\n          selected: false,\n          qty: 1,\n          sell: parseFloat(costEa.toFixed(2))\n        };\n      });\n      setItems(initialized);\n      setLoading(false);\n    });\n  }, []);\n\n  const updateItem = (index: number, field: string, value: any) => {\n    const updated = [...items];\n    if (field === 'qty') {\n      updated[index][field] = parseInt(value) || 1;\n    } else if (field === 'sell') {\n      updated[index][field] = parseFloat(value) || 0;\n    } else {\n      updated[index][field] = value;\n    }\n    setItems(updated);\n  };\n\n  const applyMarginToAll = () => {\n    const updated = items.map(item => {\n      if (!item.selected) return item;\n      const costEa = item.bulk / item.carton;\n      const newSell = costEa / (1 - marginInput / 100);\n      return {\n        ...item,\n        sell: parseFloat(newSell.toFixed(2))\n      };\n    });\n    setItems(updated);\n    setMarginDialogOpen(false);\n  };\n\n  const filtered = items.filter(row => row.selected);\n  const totalCost = filtered.reduce((sum, row) => sum + (row.bulk / row.carton) * row.qty, 0);\n  const totalSell = filtered.reduce((sum, row) => sum + row.sell * row.qty, 0);\n  const totalProfit = filtered.reduce((sum, row) => sum + (row.sell - (row.bulk / row.carton)) * row.qty, 0);\n  const roundedProfit = Math.abs(totalProfit) < 0.005 ? 0 : totalProfit;\n  const actualMargin = totalSell > 0 ? (roundedProfit / totalSell) * 100 : 0;\n  const finalCost = totalSell + shippingRate;\n\n  const handleSave = async () => {\n    setSaving(true);\n    setError('');\n    setSuccess('');\n\n    if (!listName.trim()) {\n      setError('List name is required.');\n      setSaving(false);\n      return;\n    }\n\n    const exists = await checkListNameExists(listName);\n    if (exists) {\n      console.warn(`⚠️ Overwriting existing list: ${listName}`);\n    }\n\n    const metaSaved = await saveSupplyListMeta(listName, desiredMargin, shippingRate);\n\n    const validItems = items.filter(item => item.selected && item.uid);\n\n    const itemsSaved = await saveSupplyListItems(listName, validItems, true);\n\n    if (metaSaved && itemsSaved) {\n      setSuccess('✅ List and items saved successfully!');\n    } else {\n      setError('❌ Failed to save list or items.');\n    }\n\n    setSaving(false);\n  };\n\n  if (loading) return <div style={{ padding: 20 }}>Loading...</div>;\n\n  return (\n    <Layout>\n      <div style={{ padding: 20, fontFamily: 'Arial' }}>\n        <h2>Build New Supply List</h2>\n\n        <div style={{ marginBottom: 10 }}>\n          <label><strong>List Name: </strong></label>\n          <input value={listName} onChange={e => setListName(e.target.value)} style={{ marginLeft: 10 }} />\n        </div>\n\n        <table border={1} cellPadding={6} cellSpacing={0}>\n          <thead>\n            <tr>\n              <th>Add</th>\n              <th>Item</th>\n              <th>SKU</th>\n              <th>Cost Ea.</th>\n              <th>Qty</th>\n              <th>Sell</th>\n              <th>Profit</th>\n            </tr>\n          </thead>\n          <tbody>\n            {items.map((row, idx) => {\n              const costEa = row.bulk / row.carton;\n              let profit = (row.sell - costEa) * row.qty;\n              if (Math.abs(profit) < 0.005) profit = 0;\n              return (\n                <tr key={row.sku}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={row.selected}\n                      onChange={e => updateItem(idx, 'selected', e.target.checked)}\n                    />\n                  </td>\n                  <td>{row.item}</td>\n                  <td>{row.sku}</td>\n                  <td>${costEa.toFixed(2)}</td>\n                  <td>\n                    <input\n                      type=\"number\"\n                      value={row.qty}\n                      onChange={e => updateItem(idx, 'qty', e.target.value)}\n                      disabled={!row.selected}\n                      style={{ width: 60 }}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"number\"\n                      value={row.sell}\n                      onChange={e => updateItem(idx, 'sell', e.target.value)}\n                      disabled={!row.selected}\n                      style={{ width: 60 }}\n                    />\n                  </td>\n                  <td>${profit.toFixed(2)}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <div style={{ marginTop: 20 }}>\n          <button onClick={() => setMarginDialogOpen(true)} style={{ padding: '6px 12px', marginBottom: 10 }}>\n            📈 Set All to X% Profit Margin\n          </button>\n\n          {marginDialogOpen && (\n            <div style={{ padding: 10, background: '#eee', marginBottom: 20, border: '1px solid #aaa' }}>\n              <label><strong>Profit Margin (%): </strong></label>\n              <input\n                type=\"number\"\n                value={marginInput}\n                onChange={e => setMarginInput(parseFloat(e.target.value) || 0)}\n                style={{ width: 60, marginLeft: 10 }}\n              />\n              <button onClick={applyMarginToAll} style={{ marginLeft: 10, padding: '4px 12px' }}>Apply</button>\n              <button onClick={() => setMarginDialogOpen(false)} style={{ marginLeft: 10 }}>Cancel</button>\n            </div>\n          )}\n\n          <p>\n            <label><strong>Shipping Rate ($):</strong></label>\n            <input\n              type=\"number\"\n              value={shippingRate}\n              onChange={e => setShippingRate(parseFloat(e.target.value) || 0)}\n              style={{ marginLeft: 10, width: 60 }}\n            />\n          </p>\n\n          <hr />\n          <p><strong>Total Cost:</strong> ${totalCost.toFixed(2)}</p>\n          <p><strong>Total Profit:</strong> ${totalProfit.toFixed(2)}</p>\n          <p><strong>Profit Margin:</strong> {actualMargin.toFixed(2)}%</p>\n          <p><strong>Final Cost to Customer (with Shipping):</strong> ${finalCost.toFixed(2)}</p>\n\n          <button onClick={handleSave} disabled={saving} style={{ marginTop: 20, padding: '8px 16px' }}>\n            {saving ? 'Saving...' : 'Save List'}\n          </button>\n          {error && <p style={{ color: 'red' }}>{error}</p>}\n          {success && <p style={{ color: 'green' }}>{success}</p>}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n"],"names":["async","fetchPriceItems","data","error","supabase","from","select","console","message","map","item","uid","name","sku","bulk","parseFloat","carton","parseInt","qty","sell","fetchSupplyLists","order","ascending","row","list_name","fetchSupplyListDetails","listName","eq","items","meta","_row$sell","_row$quantity","costEa","quantity","profit","metaData","metaError","limit","single","saveSupplyListItems","upsert","rows","filter","i","item_uid","isNaN","length","warn","onConflict","insert","editSupplyListItems","overwrite","saveSupplyListMeta","margin","shipping","shipping_rate","checkListNameExists","fetchSupplyListMeta","deleteSupplyList","itemError","delete","_ref","children","React","style","display","gap","padding","background","borderBottom","flexWrap","Link","to","marginRight","ListBuilder","setItems","useState","loading","setLoading","setListName","desiredMargin","setDesiredMargin","shippingRate","setShippingRate","saving","setSaving","setError","success","setSuccess","marginDialogOpen","setMarginDialogOpen","marginInput","setMarginInput","useEffect","then","initialized","selected","toFixed","updateItem","index","field","value","updated","_toConsumableArray","filtered","totalCost","reduce","sum","totalSell","totalProfit","roundedProfit","Math","abs","actualMargin","finalCost","Layout","fontFamily","marginBottom","onChange","e","target","marginLeft","border","cellPadding","cellSpacing","idx","key","type","checked","disabled","width","marginTop","onClick","applyMarginToAll","newSell","trim","metaSaved","validItems","itemsSaved","color"],"sourceRoot":""}