{"version":3,"file":"component---src-pages-lists-tsx-ace49ca390e80ea6d984.js","mappings":"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","sources":["webpack://slap-kommerce-web/./src/tables/tables.ts","webpack://slap-kommerce-web/./src/components/ListDetailV2.tsx","webpack://slap-kommerce-web/./src/pages/lists/[...].tsx","webpack://slap-kommerce-web/./src/components/Layout.tsx"],"sourcesContent":["import { supabase } from '../supabase';\n\nexport async function fetchPriceItems() {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('uid, name, sku, bulk, carton');\n\n  if (error) {\n    console.error('Error fetching price items:', error.message);\n    return [];\n  }\n\n  return data.map(item => ({\n    uid: item.uid,\n    item: item.name,\n    sku: item.sku,\n    bulk: parseFloat(item.bulk),\n    carton: parseInt(item.carton),\n    qty: 1,\n    sell: 0\n  }));\n}\n\nexport async function fetchSupplyLists(): Promise<string[]> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .order('list_name', { ascending: true });\n\n  if (error) {\n    console.error('Error fetching list names from meta:', error.message);\n    return [];\n  }\n\n  return data.map(row => row.list_name);\n}\n\n\n\nexport async function fetchSupplyListDetails(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list')\n    .select(`\n      quantity,\n      sell,\n      item:price_items (\n        uid,\n        name,\n        sku,\n        bulk,\n        carton\n      )\n    `)\n    .eq('list_name', listName);\n\n  if (error) {\n    console.error('Error fetching supply list details:', error.message);\n    return { items: [], meta: null };\n  }\n\n  const items = (data || []).map(row => {\n    const costEa = parseFloat(row.item.bulk) / row.item.carton;\n    const sell = parseFloat(row.sell ?? 0);\n    const qty = row.quantity ?? 1;\n    const profit = (sell - costEa) * qty;\n\n    return {\n      uid: row.item.uid,\n      item: row.item.name,\n      sku: row.item.sku,\n      bulk: parseFloat(row.item.bulk),\n      carton: row.item.carton,\n      costEa,\n      qty,                 // ✅ Important: use 'qty' not 'quantity'\n      sell,\n      profit\n    };\n  });\n\n  const { data: metaData, error: metaError } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (metaError) {\n    console.error('Error fetching supply list meta:', metaError.message);\n  }\n\n  return {\n    items,\n    meta: metaData || null\n  };\n}\n\n\nexport async function saveSupplyListItems(listName: string, items: any[], upsert = false) {\n  // Convert to valid rows with required fields\n  const rows = (items || [])\n    .filter(i => i.uid && typeof i.qty === 'number' && typeof i.sell === 'number')\n    .map(i => ({\n      list_name: listName,\n      item_uid: i.uid, // ✅ match schema field\n      quantity: i.qty > 0 ? i.qty : 1,\n      sell: isNaN(i.sell) ? 0 : parseFloat(i.sell)\n    }));\n\n  if (rows.length === 0) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = upsert\n    ? await supabase\n        .from('supply_list')\n        .upsert(rows, { onConflict: ['list_name', 'item_uid'] })\n    : await supabase\n        .from('supply_list')\n        .insert(rows);\n\n  if (error) {\n    console.error(`❌ Error ${upsert ? 'upserting' : 'inserting'} supply list items:`, error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\n\n\n\nexport async function editSupplyListItems(listName: string, items: any[], overwrite = true) {\n  if (!items.length) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = await supabase\n    .from('supply_list')\n    .upsert(items, { onConflict: ['list_name', 'item_uid'] });\n\n  if (error) {\n    console.error('❌ Supabase upsert error:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\nexport async function saveSupplyListMeta(listName: string, margin: number, shipping: number) {\n  const { error } = await supabase\n    .from('supply_list_meta')\n    .upsert(\n      [{ list_name: listName, margin, shipping_rate: shipping }],\n      { onConflict: ['list_name'] }\n    );\n\n  if (error) {\n    console.error('❌ Supabase error saving supply_list_meta:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\nexport async function checkListNameExists(listName: string): Promise<boolean> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .eq('list_name', listName)\n    .limit(1);\n\n  if (error) {\n    console.error('Error checking list name:', error.message);\n    return false;\n  }\n\n  return !!(data && data.length > 0);\n}\n\nexport async function fetchSupplyListMeta(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (error) {\n    console.error('Error fetching supply list meta:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function deleteSupplyList(listName: string) {\n  const { error: itemError } = await supabase\n    .from('supply_list')\n    .delete()\n    .eq('list_name', listName);\n\n  const { error: metaError } = await supabase\n    .from('supply_list_meta')\n    .delete()\n    .eq('list_name', listName);\n\n  if (itemError || metaError) {\n    console.error('❌ Failed to delete list:', itemError?.message || metaError?.message);\n    return false;\n  }\n\n  return true;\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { useLocation } from '@reach/router';\nimport { editSupplyListItems, fetchSupplyListDetails, fetchSupplyListMeta, saveSupplyListItems, saveSupplyListItemsII, saveSupplyListMeta } from '../tables/tables';\n\nexport default function ListDetail() {\n  const location = useLocation();\n  const pathParts = location.pathname.split('/').filter(Boolean);\n  const rawId = pathParts[1] || '';\n  const id = decodeURIComponent(rawId);\n\n  const [items, setItems] = useState<any[]>([]);\n  const [targetMargin, setTargetMargin] = useState<number | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [marginDialogOpen, setMarginDialogOpen] = useState(false);\n  const [marginInput, setMarginInput] = useState(30);\n  const [success, setSuccess] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!id) return;\n\n    const loadData = async () => {\n      const [details, meta] = await Promise.all([\n        fetchSupplyListDetails(id),\n        fetchSupplyListMeta(id),\n      ]);\n\n      const enriched = details.items.map((row: any) => {\n        const costEa = row.bulk / row.carton;\n        const costTotal = costEa * row.qty;\n        const totalRetail = row.sell * row.qty;\n        const profit = (row.sell - costEa) * row.qty;\n        return {\n          ...row,\n          costEa,\n          costTotal,\n          totalRetail,\n          profit\n        };\n      });\n\n      setItems(enriched);\n      setTargetMargin(meta?.desired_margin ?? null);\n      setLoading(false);\n    };\n\n    loadData();\n  }, [id]);\n\n  const updateItem = (index: number, field: string, value: string | number) => {\n    const updated = [...items];\n    const parsedValue = field === 'item' ? value : parseFloat(value as string) || 0;\n    updated[index][field] = parsedValue;\n\n    const { bulk, carton, qty, sell } = updated[index];\n    const costEa = bulk / carton;\n    const costTotal = costEa * qty;\n    const totalRetail = sell * qty;\n    const profit = (sell - costEa) * qty;\n\n    updated[index].costEa = costEa;\n    updated[index].costTotal = costTotal;\n    updated[index].totalRetail = totalRetail;\n    updated[index].profit = profit;\n\n    setItems(updated);\n  };\n\n  const applyMarginToAll = () => {\n    const updated = items.map((item) => {\n      const costEa = item.bulk / item.carton;\n      const newSell = costEa / (1 - marginInput / 100);\n      const profit = (newSell - costEa) * item.qty;\n      return {\n        ...item,\n        sell: parseFloat(newSell.toFixed(2)),\n        costEa,\n        costTotal: costEa * item.qty,\n        totalRetail: newSell * item.qty,\n        profit,\n      };\n    });\n    setItems(updated);\n    setMarginDialogOpen(false);\n  };\n\n\n  const handleSave = async () => {\n  setSaving(true);\n  setError('');\n  setSuccess('');\n\nconst mapped = items\n  .filter(i => i.uid && typeof i.qty === 'number' && typeof i.sell === 'number')\n  .map(i => ({\n    item_uid: i.uid,                  \n    list_name: id,\n    quantity: i.qty > 0 ? parseInt(i.qty, 10) : 1,\n    sell: isNaN(i.sell) ? 0 : parseFloat(i.sell)\n  }));\n\n  if (mapped.length === 0) {\n    setError('❌ No valid items to save.');\n    setSaving(false);\n    return;\n  }\n\n  const metaSaved = await saveSupplyListMeta(id, targetMargin ?? 0, 0);\n  const ok = metaSaved && await editSupplyListItems(id, mapped, true);\n\n  if (ok) {\n    setSuccess('✅ Saved successfully!');\n  } else {\n    setError('❌ Failed to save.');\n  }\n\n  setSaving(false);\n};\n\n\n\n\n\n  const totals = useMemo(() => {\n    return items.reduce(\n      (acc, row) => {\n        acc.bulk += row.bulk;\n        acc.cost += row.costEa * row.qty;\n        acc.retail += row.sell * row.qty;\n        acc.profit += row.profit;\n        return acc;\n      },\n      { bulk: 0, cost: 0, retail: 0, profit: 0 }\n    );\n  }, [items]);\n\n  const currentMargin = totals.retail > 0 ? (totals.profit / totals.retail) * 100 : 0;\n\n  if (loading) return <div style={{ padding: 20 }}>Loading...</div>;\n\n  return (\n    <div style={{ padding: 20, fontFamily: 'Arial' }}>\n      <h2>Supply List: {id}</h2>\n\n      <button onClick={() => setMarginDialogOpen(true)} style={{ marginBottom: 10 }}>\n        📈 Set All to X% Profit Margin\n      </button>\n\n      {marginDialogOpen && (\n        <div style={{ padding: 10, background: '#eee', marginBottom: 20, border: '1px solid #aaa' }}>\n          <label><strong>Profit Margin (%): </strong></label>\n          <input\n            type=\"number\"\n            value={marginInput}\n            onChange={e => setMarginInput(parseFloat(e.target.value) || 0)}\n            style={{ width: 60, marginLeft: 10 }}\n          />\n          <button onClick={applyMarginToAll} style={{ marginLeft: 10, padding: '4px 12px' }}>Apply</button>\n          <button onClick={() => setMarginDialogOpen(false)} style={{ marginLeft: 10 }}>Cancel</button>\n        </div>\n      )}\n\n      <table border={1} cellPadding={6} cellSpacing={0}>\n        <thead>\n          <tr>\n            <th>ITEM</th>\n            <th>BULK</th>\n            <th>CARTON</th>\n            <th>COST EA.</th>\n            <th>COST TL.</th>\n            <th>QTY</th>\n            <th>SELL</th>\n            <th>TOTAL</th>\n            <th>PROFIT</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((row, idx) => (\n            <tr key={row.sku}>\n              <td><input value={row.item} onChange={e => updateItem(idx, 'item', e.target.value)} /></td>\n              <td>{row.bulk}</td>\n              <td>{row.carton}</td>\n              <td>${row.costEa.toFixed(2)}</td>\n              <td>${row.costTotal.toFixed(2)}</td>\n              <td>\n                <input\n                  type=\"number\"\n                  value={row.qty}\n                  onChange={e => updateItem(idx, 'qty', e.target.value)}\n                  style={{ width: 60 }}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"number\"\n                  value={row.sell}\n                  onChange={e => updateItem(idx, 'sell', e.target.value)}\n                  style={{ width: 60 }}\n                />\n              </td>\n              <td>${row.totalRetail.toFixed(2)}</td>\n              <td>${row.profit.toFixed(2)}</td>\n            </tr>\n          ))}\n\n          <tr><td colSpan={5}><strong>Bulk Total</strong></td><td colSpan={4}>${totals.bulk.toFixed(2)}</td></tr>\n          <tr><td colSpan={5}><strong>Expenses</strong></td><td colSpan={4}>${totals.cost.toFixed(2)}</td></tr>\n          <tr><td colSpan={5}><strong>Revenue</strong></td><td colSpan={4}>${totals.retail.toFixed(2)}</td></tr>\n          <tr><td colSpan={5}><strong>Profit</strong></td><td colSpan={4}>${totals.profit.toFixed(2)}</td></tr>\n          <tr><td colSpan={5}><strong>Current Margin</strong></td><td colSpan={4}>{currentMargin.toFixed(2)}%</td></tr>\n        </tbody>\n      </table>\n\n      <button onClick={handleSave} disabled={saving} style={{ marginTop: 20, padding: '8px 16px' }}>\n        {saving ? 'Saving...' : '💾 Save Changes'}\n      </button>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      {success && <p style={{ color: 'green' }}>{success}</p>}\n    </div>\n  );\n}\n","import React from 'react'\nimport Layout from \"../../components/Layout\";\nimport ListDetail from \"../../components/ListDetailV2\";\nimport ListBuilder from \"../builder\";\n\nexport default () =><Layout>\n  <ListDetail/>\n</Layout>","// src/components/Layout.tsx\nimport React, { ReactNode } from 'react';\nimport { Link } from 'gatsby';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst Layout = ({ children }: LayoutProps) => (\n  <>\n    <nav\n      style={{\n        display: 'flex',\n        gap: '1rem',\n        padding: '10px',\n        background: '#f0f0f0',\n        borderBottom: '1px solid #ccc',\n        flexWrap: 'wrap',\n      }}\n    >\n      {/* <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Original</Link> */}\n      <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Lists</Link> \n      <Link to=\"/builder\">📥 New</Link>\n      <Link to=\"/bottom-line\">📤 Average Profit Margin</Link>\n    </nav>\n    <main style={{ padding: '20px' }}>{children}</main>\n  </>\n);\n\nexport default Layout;\n"],"names":["async","fetchPriceItems","data","error","supabase","from","select","console","message","map","item","uid","name","sku","bulk","parseFloat","carton","parseInt","qty","sell","fetchSupplyLists","order","ascending","row","list_name","fetchSupplyListDetails","listName","eq","items","meta","_row$sell","_row$quantity","costEa","quantity","profit","metaData","metaError","limit","single","saveSupplyListItems","upsert","rows","filter","i","item_uid","isNaN","length","warn","onConflict","insert","editSupplyListItems","overwrite","saveSupplyListMeta","margin","shipping","shipping_rate","checkListNameExists","fetchSupplyListMeta","deleteSupplyList","itemError","delete","ListDetail","rawId","useLocation","pathname","split","Boolean","id","decodeURIComponent","setItems","useState","targetMargin","setTargetMargin","loading","setLoading","saving","setSaving","marginDialogOpen","setMarginDialogOpen","marginInput","setMarginInput","success","setSuccess","setError","useEffect","_meta$desired_margin","details","Promise","all","enriched","costTotal","totalRetail","desired_margin","loadData","updateItem","index","field","value","updated","_toConsumableArray","parsedValue","totals","useMemo","reduce","acc","cost","retail","currentMargin","React","style","padding","fontFamily","onClick","marginBottom","background","border","type","onChange","e","target","width","marginLeft","applyMarginToAll","newSell","toFixed","cellPadding","cellSpacing","idx","key","colSpan","mapped","disabled","marginTop","color","Layout","_ref","children","display","gap","borderBottom","flexWrap","Link","to","marginRight"],"sourceRoot":""}