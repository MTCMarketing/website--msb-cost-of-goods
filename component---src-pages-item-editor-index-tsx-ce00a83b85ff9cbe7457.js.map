{"version":3,"file":"component---src-pages-item-editor-index-tsx-ce00a83b85ff9cbe7457.js","mappings":"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","sources":["webpack://slap-kommerce-web/./src/tables/tables.ts","webpack://slap-kommerce-web/./src/components/Layout.tsx","webpack://slap-kommerce-web/./src/pages/item-editor/index.tsx"],"sourcesContent":["import { supabase } from '../supabase';\n\nexport async function fetchPriceItems() {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('uid, name, sku, bulk, carton');\n\n  if (error) {\n    console.error('Error fetching price items:', error.message);\n    return [];\n  }\n\n  return data.map(item => ({\n    uid: item.uid,\n    item: item.name,\n    sku: item.sku,\n    bulk: parseFloat(item.bulk),\n    carton: parseInt(item.carton),\n    qty: 1,\n    sell: 0\n  }));\n}\n\n\n\nexport async function fetchPriceItemById(id: string) {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('*')\n    .eq('uid', id)\n    .single();\n\n  if (error) {\n    console.error('Fetch item error:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function savePriceItem(uid: string, updates: any) {\n  const { error } = await supabase\n    .from('price_items')\n    .update(updates)\n    .eq('uid', uid);\n\n  return { success: !error, error };\n}\n\nexport async function generateNextSku() {\n  const { count, error } = await supabase\n    .from('price_items')\n    .select('uid', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error counting rows in price_items:', error.message);\n    return null;\n  }\n\n  const nextNumber = (count ?? 0) + 1;\n\n  const skuNumber = nextNumber.toString().padStart(3, '0'); // ensures 3 digits\n  return `SKU-${skuNumber}`;\n}\n\nexport async function fetchSupplyLists(): Promise<string[]> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .order('list_name', { ascending: true });\n\n  if (error) {\n    console.error('Error fetching list names from meta:', error.message);\n    return [];\n  }\n\n  return data.map(row => row.list_name);\n}\n\n\n\nexport async function fetchSupplyListDetails(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list')\n    .select(`\n      quantity,\n      sell,\n      item:price_items (\n        uid,\n        name,\n        sku,\n        bulk,\n        carton\n      )\n    `)\n    .eq('list_name', listName);\n\n  if (error) {\n    console.error('Error fetching supply list details:', error.message);\n    return { items: [], meta: null };\n  }\n\n  const items = (data || []).map(row => {\n    const costEa = parseFloat(row.item.bulk) / row.item.carton;\n    const sell = parseFloat(row.sell ?? 0);\n    const qty = row.quantity ?? 1;\n    const profit = (sell - costEa) * qty;\n\n    return {\n      uid: row.item.uid,\n      item: row.item.name,\n      sku: row.item.sku,\n      bulk: parseFloat(row.item.bulk),\n      carton: row.item.carton,\n      costEa,\n      qty,                 // ✅ Important: use 'qty' not 'quantity'\n      sell,\n      profit\n    };\n  });\n\n  const { data: metaData, error: metaError } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (metaError) {\n    console.error('Error fetching supply list meta:', metaError.message);\n  }\n\n  return {\n    items,\n    meta: metaData || null\n  };\n}\n\n\nexport async function saveSupplyListItems(listName: string, items: any[], upsert = false) {\n  // Convert to valid rows with required fields\n  const rows = (items || [])\n    .filter(i => i.uid && typeof i.qty === 'number' && typeof i.sell === 'number')\n    .map(i => ({\n      list_name: listName,\n      item_uid: i.uid, // ✅ match schema field\n      quantity: i.qty > 0 ? i.qty : 1,\n      sell: isNaN(i.sell) ? 0 : parseFloat(i.sell)\n    }));\n\n  if (rows.length === 0) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = upsert\n    ? await supabase\n        .from('supply_list')\n        .upsert(rows, { onConflict: ['list_name', 'item_uid'] })\n    : await supabase\n        .from('supply_list')\n        .insert(rows);\n\n  if (error) {\n    console.error(`❌ Error ${upsert ? 'upserting' : 'inserting'} supply list items:`, error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\n\n\n\nexport async function editSupplyListItems(listName: string, items: any[], overwrite = true) {\n  if (!items.length) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = await supabase\n    .from('supply_list')\n    .upsert(items, { onConflict: ['list_name', 'item_uid'] });\n\n  if (error) {\n    console.error('❌ Supabase upsert error:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\nexport async function saveSupplyListMeta(listName: string, margin: number, shipping: number) {\n  const { error } = await supabase\n    .from('supply_list_meta')\n    .upsert(\n      [{ list_name: listName, margin, shipping_rate: shipping }],\n      { onConflict: ['list_name'] }\n    );\n\n  if (error) {\n    console.error('❌ Supabase error saving supply_list_meta:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\nexport async function checkListNameExists(listName: string): Promise<boolean> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .eq('list_name', listName)\n    .limit(1);\n\n  if (error) {\n    console.error('Error checking list name:', error.message);\n    return false;\n  }\n\n  return !!(data && data.length > 0);\n}\n\nexport async function fetchSupplyListMeta(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (error) {\n    console.error('Error fetching supply list meta:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function deleteSupplyList(listName: string) {\n  const { error: itemError } = await supabase\n    .from('supply_list')\n    .delete()\n    .eq('list_name', listName);\n\n  const { error: metaError } = await supabase\n    .from('supply_list_meta')\n    .delete()\n    .eq('list_name', listName);\n\n  if (itemError || metaError) {\n    console.error('❌ Failed to delete list:', itemError?.message || metaError?.message);\n    return false;\n  }\n\n  return true;\n}\n","// src/components/Layout.tsx\nimport React, { ReactNode } from 'react';\nimport { Link } from 'gatsby';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst Layout = ({ children }: LayoutProps) => (\n  <>\n    <nav\n      style={{\n        display: 'flex',\n        gap: '1rem',\n        padding: '10px',\n        background: '#f0f0f0',\n        borderBottom: '1px solid #ccc',\n        flexWrap: 'wrap',\n      }}\n    >\n      {/* <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Original</Link> */}\n      <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Lists</Link> \n      <Link to=\"/list-builder\">📥 New List</Link>\n      <Link to=\"/item-builder\">📥 New Item</Link>\n      <Link to=\"/bottom-line\">📤 Average Profit Margin</Link>\n    </nav>\n    <main style={{ padding: '20px' }}>{children}</main>\n  </>\n);\n\nexport default Layout;\n","import React, { useEffect, useState } from 'react';\nimport { generateNextSku } from '../../tables/tables';\nimport { supabase } from '../../supabase';\nimport Layout from '../../components/Layout';\n\n\nexport default function CreateItem() {\n  const [items, setItems] = useState<any[]>([]);\n  const [initialSkuNumber, setInitialSkuNumber] = useState<number | null>(null);\n  const [saving, setSaving] = useState(false);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const init = async () => {\n      const baseSku = await generateNextSku(0);\n      if (!baseSku) return;\n\n      const baseNumber = parseInt(baseSku.replace('SKU-', ''));\n      setInitialSkuNumber(baseNumber);\n\n      setItems([\n        {\n          item: '',\n          sku: formatSku(baseNumber),\n          bulk: 0,\n          carton: 0,\n          price_each: 0\n        }\n      ]);\n    };\n\n    init();\n  }, []);\n\n  const formatSku = (n: number) => `SKU-${n.toString().padStart(3, '0')}`;\n\n  const handleChange = (index: number, field: string, value: string | number) => {\n    const updated = [...items];\n    updated[index][field] =\n      field === 'item' || field === 'sku' ? value : parseFloat(value as string) || 0;\n    setItems(updated);\n  };\n\n  const addRow = () => {\n    if (initialSkuNumber === null) return;\n\n    const nextIndex = items.length;\n    const nextSku = formatSku(initialSkuNumber + nextIndex);\n\n    setItems(prev => [\n      ...prev,\n      { item: '', sku: nextSku, bulk: 0, carton: 0, price_each: 0 }\n    ]);\n  };\n\n  const deleteRow = (index: number) => {\n    const updated = [...items];\n    updated.splice(index, 1);\n    setItems(updated);\n  };\n\n  const saveAllItems = async () => {\n    setMessage('');\n    let invalid = false;\n    const zeroPriceRows: number[] = [];\n\n    const validItems = items.filter((item, idx) => {\n      const { item: name, sku, bulk, carton } = item;\n      if (\n        typeof name !== 'string' || name.trim() === '' ||\n        typeof sku !== 'string' || sku.trim() === '' ||\n        isNaN(bulk) || bulk <= 0 ||\n        isNaN(carton) || carton <= 0\n      ) {\n        invalid = true;\n        return false;\n      }\n\n      if (item.price_each === 0) {\n        zeroPriceRows.push(idx);\n      }\n\n      return true;\n    });\n\n    if (invalid) {\n      alert('❌ Please fill all required fields with valid values before saving.');\n      return;\n    }\n\n    if (zeroPriceRows.length > 0) {\n      const proceed = confirm(`⚠️ ${zeroPriceRows.length} item(s) have $0 price. Continue anyway?`);\n      if (!proceed) return;\n    }\n\n    const payload = validItems.map(({ item, sku, bulk, carton, price_each }) => ({\n      name: item,\n      sku,\n      bulk,\n      carton,\n      price_each\n    }));\n\n    setSaving(true);\n\n    try {\n      const { error } = await supabase.from('price_items').insert(payload);\n\n      if (error) {\n        console.error('Insert error:', error.message);\n        setMessage(`❌ Error: ${error.message}`);\n        return;\n      }\n\n      // Remove inserted items from list\n      const remaining = items.filter(item => !validItems.includes(item));\n      setItems(remaining);\n      setMessage(`✅ ${payload.length} item(s) added successfully!`);\n    } catch (err: any) {\n      console.error('Unexpected error:', err);\n      setMessage('❌ Unexpected error occurred.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <Layout>\n    <div style={{ padding: 20, fontFamily: 'Arial' }}>\n      <h2>Create Items</h2>\n\n      {items.length === 0 ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <table border={1} cellPadding={6} cellSpacing={0}>\n            <thead>\n              <tr>\n                <th>Item</th>\n                <th>SKU</th>\n                <th>Bulk</th>\n                <th>Carton</th>\n                <th>Cost Ea.</th>\n                <th>Price Ea.</th>\n                <th>Profit</th>\n                <th>Profit Margin</th>\n                <th>❌</th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map((row, idx) => {\n                const costEa = row.carton > 0 ? row.bulk / row.carton : 0;\n                const profit = row.price_each - costEa;\n                const margin = costEa > 0 ? (profit / costEa) * 100 : 0;\n\n                return (\n                  <tr key={idx}>\n                    <td>\n                      <input\n                        value={row.item}\n                        onChange={e => handleChange(idx, 'item', e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        value={row.sku}\n                        onChange={e => handleChange(idx, 'sku', e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={row.bulk}\n                        onChange={e => handleChange(idx, 'bulk', e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={row.carton}\n                        onChange={e => handleChange(idx, 'carton', e.target.value)}\n                      />\n                    </td>\n                    <td>${costEa.toFixed(2)}</td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={row.price_each}\n                        onChange={e => handleChange(idx, 'price_each', e.target.value)}\n                      />\n                    </td>\n                    <td>${profit.toFixed(2)}</td>\n                    <td>{margin.toFixed(1)}%</td>\n                    <td>\n                      <button onClick={() => deleteRow(idx)}>❌</button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n\n          <div style={{ marginTop: 16 }}>\n            <button onClick={addRow}>➕ Add Row</button>{' '}\n            <button onClick={saveAllItems} disabled={saving}>\n              {saving ? '⏳ Saving...' : '💾 Save All'}\n            </button>\n          </div>\n        </>\n      )}\n\n      {message && <p style={{ marginTop: 12 }}>{message}</p>}\n    </div>\n    </Layout>\n  );\n}\n"],"names":["async","fetchPriceItems","data","error","supabase","from","select","console","message","map","item","uid","name","sku","bulk","parseFloat","carton","parseInt","qty","sell","fetchPriceItemById","id","eq","single","savePriceItem","updates","update","success","generateNextSku","count","head","toString","padStart","fetchSupplyLists","order","ascending","row","list_name","fetchSupplyListDetails","listName","items","meta","_row$sell","_row$quantity","costEa","quantity","profit","metaData","metaError","limit","saveSupplyListItems","upsert","rows","filter","i","item_uid","isNaN","length","warn","onConflict","insert","editSupplyListItems","overwrite","saveSupplyListMeta","margin","shipping","shipping_rate","checkListNameExists","fetchSupplyListMeta","deleteSupplyList","itemError","delete","_ref","children","React","style","display","gap","padding","background","borderBottom","flexWrap","Link","to","marginRight","CreateItem","setItems","useState","initialSkuNumber","setInitialSkuNumber","saving","setSaving","setMessage","useEffect","baseSku","baseNumber","replace","formatSku","price_each","init","n","handleChange","index","field","value","updated","_toConsumableArray","Layout","fontFamily","border","cellPadding","cellSpacing","idx","key","onChange","e","target","type","toFixed","onClick","splice","deleteRow","marginTop","addRow","nextIndex","nextSku","prev","concat","invalid","zeroPriceRows","validItems","trim","push","alert","confirm","payload","remaining","includes","err","disabled"],"sourceRoot":""}