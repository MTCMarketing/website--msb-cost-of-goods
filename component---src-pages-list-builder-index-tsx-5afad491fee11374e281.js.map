{"version":3,"file":"component---src-pages-list-builder-index-tsx-5afad491fee11374e281.js","mappings":"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","sources":["webpack://slap-kommerce-web/./src/tables/tables.ts","webpack://slap-kommerce-web/./src/pages/list-builder/index.tsx","webpack://slap-kommerce-web/./src/components/Layout.tsx"],"sourcesContent":["import { supabase } from '../supabase';\n\nexport async function fetchPriceItems() {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('uid, name, sku, bulk, carton');\n\n  if (error) {\n    console.error('Error fetching price items:', error.message);\n    return [];\n  }\n\n  return data.map(item => ({\n    uid: item.uid,\n    item: item.name,\n    sku: item.sku,\n    bulk: parseFloat(item.bulk),\n    carton: parseInt(item.carton),\n    qty: 1,\n    sell: 0\n  }));\n}\n\n\n\nexport async function fetchPriceItemById(id: string) {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('*')\n    .eq('uid', id)\n    .single();\n\n  if (error) {\n    console.error('Fetch item error:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function savePriceItem(uid: string, updates: any) {\n  const { error } = await supabase\n    .from('price_items')\n    .update(updates)\n    .eq('uid', uid);\n\n  return { success: !error, error };\n}\n\nexport async function generateNextSku() {\n  const { count, error } = await supabase\n    .from('price_items')\n    .select('uid', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error counting rows in price_items:', error.message);\n    return null;\n  }\n\n  const nextNumber = (count ?? 0) + 1;\n\n  const skuNumber = nextNumber.toString().padStart(3, '0'); // ensures 3 digits\n  return `SKU-${skuNumber}`;\n}\n\nexport async function fetchSupplyLists(): Promise<string[]> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .order('list_name', { ascending: true });\n\n  if (error) {\n    console.error('Error fetching list names from meta:', error.message);\n    return [];\n  }\n\n  return data.map(row => row.list_name);\n}\n\n\n\nexport async function fetchSupplyListDetails(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list')\n    .select(`\n      quantity,\n      sell,\n      item:price_items (\n        uid,\n        name,\n        sku,\n        bulk,\n        carton\n      )\n    `)\n    .eq('list_name', listName);\n\n  if (error) {\n    console.error('Error fetching supply list details:', error.message);\n    return { items: [], meta: null };\n  }\n\n  const items = (data || []).map(row => {\n    const costEa = parseFloat(row.item.bulk) / row.item.carton;\n    const sell = parseFloat(row.sell ?? 0);\n    const qty = row.quantity ?? 1;\n    const profit = (sell - costEa) * qty;\n\n    return {\n      uid: row.item.uid,\n      item: row.item.name,\n      sku: row.item.sku,\n      bulk: parseFloat(row.item.bulk),\n      carton: row.item.carton,\n      costEa,\n      qty,                 // ✅ Important: use 'qty' not 'quantity'\n      sell,\n      profit\n    };\n  });\n\n  const { data: metaData, error: metaError } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (metaError) {\n    console.error('Error fetching supply list meta:', metaError.message);\n  }\n\n  return {\n    items,\n    meta: metaData || null\n  };\n}\n\n\nexport async function saveSupplyListItems(listName: string, items: any[], upsert = false) {\n  // Convert to valid rows with required fields\n  const rows = (items || [])\n    .filter(i => i.uid && typeof i.qty === 'number' && typeof i.sell === 'number')\n    .map(i => ({\n      list_name: listName,\n      item_uid: i.uid, // ✅ match schema field\n      quantity: i.qty > 0 ? i.qty : 1,\n      sell: isNaN(i.sell) ? 0 : parseFloat(i.sell)\n    }));\n\n  if (rows.length === 0) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = upsert\n    ? await supabase\n        .from('supply_list')\n        .upsert(rows, { onConflict: ['list_name', 'item_uid'] })\n    : await supabase\n        .from('supply_list')\n        .insert(rows);\n\n  if (error) {\n    console.error(`❌ Error ${upsert ? 'upserting' : 'inserting'} supply list items:`, error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\n\n\n\nexport async function editSupplyListItems(listName: string, items: any[], overwrite = true) {\n  if (!items.length) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = await supabase\n    .from('supply_list')\n    .upsert(items, { onConflict: ['list_name', 'item_uid'] });\n\n  if (error) {\n    console.error('❌ Supabase upsert error:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\nexport async function saveSupplyListMeta(listName: string, margin: number, shipping: number) {\n  const { error } = await supabase\n    .from('supply_list_meta')\n    .upsert(\n      [{ list_name: listName, margin, shipping_rate: shipping }],\n      { onConflict: ['list_name'] }\n    );\n\n  if (error) {\n    console.error('❌ Supabase error saving supply_list_meta:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\nexport async function checkListNameExists(listName: string): Promise<boolean> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .eq('list_name', listName)\n    .limit(1);\n\n  if (error) {\n    console.error('Error checking list name:', error.message);\n    return false;\n  }\n\n  return !!(data && data.length > 0);\n}\n\nexport async function fetchSupplyListMeta(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (error) {\n    console.error('Error fetching supply list meta:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function deleteSupplyList(listName: string) {\n  const { error: itemError } = await supabase\n    .from('supply_list')\n    .delete()\n    .eq('list_name', listName);\n\n  const { error: metaError } = await supabase\n    .from('supply_list_meta')\n    .delete()\n    .eq('list_name', listName);\n\n  if (itemError || metaError) {\n    console.error('❌ Failed to delete list:', itemError?.message || metaError?.message);\n    return false;\n  }\n\n  return true;\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  fetchPriceItems,\n  checkListNameExists,\n  saveSupplyListMeta,\n  saveSupplyListItems\n} from '../../tables/tables';\nimport Layout from '../../components/Layout';\n\nexport default function ListBuilder() {\n  const [items, setItems] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [listName, setListName] = useState('');\n  const [desiredMargin, setDesiredMargin] = useState(40);\n  const [shippingRate, setShippingRate] = useState(17);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [marginDialogOpen, setMarginDialogOpen] = useState(false);\n  const [marginInput, setMarginInput] = useState(30);\n\n  useEffect(() => {\n    fetchPriceItems().then(data => {\n      const initialized = data.map(item => {\n        const costEa = item.bulk / item.carton;\n        return {\n          ...item,\n          selected: false,\n          qty: 1,\n          sell: parseFloat(costEa.toFixed(2))\n        };\n      });\n      setItems(initialized);\n      setLoading(false);\n    });\n  }, []);\n\n  const updateItem = (index: number, field: string, value: any) => {\n    const updated = [...items];\n    if (field === 'qty') {\n      updated[index][field] = parseInt(value) || 1;\n    } else if (field === 'sell') {\n      updated[index][field] = parseFloat(value) || 0;\n    } else {\n      updated[index][field] = value;\n    }\n    setItems(updated);\n  };\n\n  const applyMarginToAll = () => {\n    const updated = items.map(item => {\n      if (!item.selected) return item;\n      const costEa = item.bulk / item.carton;\n      const newSell = costEa / (1 - marginInput / 100);\n      return {\n        ...item,\n        sell: parseFloat(newSell.toFixed(2))\n      };\n    });\n    setItems(updated);\n    setMarginDialogOpen(false);\n  };\n\n  const filtered = items.filter(row => row.selected);\n  const totalCost = filtered.reduce((sum, row) => sum + (row.bulk / row.carton) * row.qty, 0);\n  const totalSell = filtered.reduce((sum, row) => sum + row.sell * row.qty, 0);\n  const totalProfit = filtered.reduce((sum, row) => sum + (row.sell - (row.bulk / row.carton)) * row.qty, 0);\n  const roundedProfit = Math.abs(totalProfit) < 0.005 ? 0 : totalProfit;\n  const actualMargin = totalSell > 0 ? (roundedProfit / totalSell) * 100 : 0;\n  const finalCost = totalSell + shippingRate;\n\n  const handleSave = async () => {\n    setSaving(true);\n    setError('');\n    setSuccess('');\n\n    if (!listName.trim()) {\n      setError('List name is required.');\n      setSaving(false);\n      return;\n    }\n\n    const exists = await checkListNameExists(listName);\n    if (exists) {\n      console.warn(`⚠️ Overwriting existing list: ${listName}`);\n    }\n\n    const metaSaved = await saveSupplyListMeta(listName, desiredMargin, shippingRate);\n\n    const validItems = items.filter(item => item.selected && item.uid);\n\n    const itemsSaved = await saveSupplyListItems(listName, validItems, true);\n\n    if (metaSaved && itemsSaved) {\n      setSuccess('✅ List and items saved successfully!');\n    } else {\n      setError('❌ Failed to save list or items.');\n    }\n\n    setSaving(false);\n  };\n\n  if (loading) return <div style={{ padding: 20 }}>Loading...</div>;\n\n  return (\n    <Layout>\n      <div style={{ padding: 20, fontFamily: 'Arial' }}>\n        <h2>Build New Supply List</h2>\n\n        <div style={{ marginBottom: 10 }}>\n          <label><strong>List Name: </strong></label>\n          <input value={listName} onChange={e => setListName(e.target.value)} style={{ marginLeft: 10 }} />\n        </div>\n\n        <table border={1} cellPadding={6} cellSpacing={0}>\n          <thead>\n            <tr>\n              <th>Add</th>\n              <th>Item</th>\n              <th>SKU</th>\n              <th>Cost Ea.</th>\n              <th>Qty</th>\n              <th>Sell</th>\n              <th>Profit</th>\n            </tr>\n          </thead>\n          <tbody>\n            {items.map((row, idx) => {\n              const costEa = row.bulk / row.carton;\n              let profit = (row.sell - costEa) * row.qty;\n              if (Math.abs(profit) < 0.005) profit = 0;\n              return (\n                <tr key={row.sku}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={row.selected}\n                      onChange={e => updateItem(idx, 'selected', e.target.checked)}\n                    />\n                  </td>\n                  <td>{row.item}</td>\n                  <td>{row.sku}</td>\n                  <td>${costEa.toFixed(2)}</td>\n                  <td>\n                    <input\n                      type=\"number\"\n                      value={row.qty}\n                      onChange={e => updateItem(idx, 'qty', e.target.value)}\n                      disabled={!row.selected}\n                      style={{ width: 60 }}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"number\"\n                      value={row.sell}\n                      onChange={e => updateItem(idx, 'sell', e.target.value)}\n                      disabled={!row.selected}\n                      style={{ width: 60 }}\n                    />\n                  </td>\n                  <td>${profit.toFixed(2)}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <div style={{ marginTop: 20 }}>\n          <button onClick={() => setMarginDialogOpen(true)} style={{ padding: '6px 12px', marginBottom: 10 }}>\n            📈 Set All to X% Profit Margin\n          </button>\n\n          {marginDialogOpen && (\n            <div style={{ padding: 10, background: '#eee', marginBottom: 20, border: '1px solid #aaa' }}>\n              <label><strong>Profit Margin (%): </strong></label>\n              <input\n                type=\"number\"\n                value={marginInput}\n                onChange={e => setMarginInput(parseFloat(e.target.value) || 0)}\n                style={{ width: 60, marginLeft: 10 }}\n              />\n              <button onClick={applyMarginToAll} style={{ marginLeft: 10, padding: '4px 12px' }}>Apply</button>\n              <button onClick={() => setMarginDialogOpen(false)} style={{ marginLeft: 10 }}>Cancel</button>\n            </div>\n          )}\n\n          <p>\n            <label><strong>Shipping Rate ($):</strong></label>\n            <input\n              type=\"number\"\n              value={shippingRate}\n              onChange={e => setShippingRate(parseFloat(e.target.value) || 0)}\n              style={{ marginLeft: 10, width: 60 }}\n            />\n          </p>\n\n          <hr />\n          <p><strong>Total Cost:</strong> ${totalCost.toFixed(2)}</p>\n          <p><strong>Total Profit:</strong> ${totalProfit.toFixed(2)}</p>\n          <p><strong>Profit Margin:</strong> {actualMargin.toFixed(2)}%</p>\n          <p><strong>Final Cost to Customer (with Shipping):</strong> ${finalCost.toFixed(2)}</p>\n\n          <button onClick={handleSave} disabled={saving} style={{ marginTop: 20, padding: '8px 16px' }}>\n            {saving ? 'Saving...' : 'Save List'}\n          </button>\n          {error && <p style={{ color: 'red' }}>{error}</p>}\n          {success && <p style={{ color: 'green' }}>{success}</p>}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","// src/components/Layout.tsx\nimport React, { ReactNode } from 'react';\nimport { Link } from 'gatsby';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst Layout = ({ children }: LayoutProps) => (\n  <>\n    <nav\n      style={{\n        display: 'flex',\n        gap: '1rem',\n        padding: '10px',\n        background: '#f0f0f0',\n        borderBottom: '1px solid #ccc',\n        flexWrap: 'wrap',\n      }}\n    >\n      {/* <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Original</Link> */}\n      <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Lists</Link> \n      <Link to=\"/list-builder\">📥 New List</Link>\n      <Link to=\"/item-builder\">📥 New Item</Link>\n      <Link to=\"/bottom-line\">📤 Average Profit Margin</Link>\n    </nav>\n    <main style={{ padding: '20px' }}>{children}</main>\n  </>\n);\n\nexport default Layout;\n"],"names":["async","fetchPriceItems","data","error","supabase","from","select","console","message","map","item","uid","name","sku","bulk","parseFloat","carton","parseInt","qty","sell","fetchPriceItemById","id","eq","single","savePriceItem","updates","update","success","generateNextSku","count","head","toString","padStart","fetchSupplyLists","order","ascending","row","list_name","fetchSupplyListDetails","listName","items","meta","_row$sell","_row$quantity","costEa","quantity","profit","metaData","metaError","limit","saveSupplyListItems","upsert","rows","filter","i","item_uid","isNaN","length","warn","onConflict","insert","editSupplyListItems","overwrite","saveSupplyListMeta","margin","shipping","shipping_rate","checkListNameExists","fetchSupplyListMeta","deleteSupplyList","itemError","delete","ListBuilder","setItems","useState","loading","setLoading","setListName","desiredMargin","setDesiredMargin","shippingRate","setShippingRate","saving","setSaving","setError","setSuccess","marginDialogOpen","setMarginDialogOpen","marginInput","setMarginInput","useEffect","then","initialized","selected","toFixed","updateItem","index","field","value","updated","_toConsumableArray","filtered","totalCost","reduce","sum","totalSell","totalProfit","roundedProfit","Math","abs","actualMargin","finalCost","React","style","padding","Layout","fontFamily","marginBottom","onChange","e","target","marginLeft","border","cellPadding","cellSpacing","idx","key","type","checked","disabled","width","marginTop","onClick","background","applyMarginToAll","newSell","trim","metaSaved","validItems","itemsSaved","color","_ref","children","display","gap","borderBottom","flexWrap","Link","to","marginRight"],"sourceRoot":""}