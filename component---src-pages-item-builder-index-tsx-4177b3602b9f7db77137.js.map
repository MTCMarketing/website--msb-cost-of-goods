{"version":3,"file":"component---src-pages-item-builder-index-tsx-4177b3602b9f7db77137.js","mappings":"4NAMe,SAASA,IACtB,MAAM,EAACC,EAAK,EAAEC,IAAYC,EAAAA,EAAAA,UAAgB,KACpC,EAACC,EAAgB,EAAEC,IAAuBF,EAAAA,EAAAA,UAAwB,OAClE,EAACG,EAAM,EAAEC,IAAaJ,EAAAA,EAAAA,WAAS,IAC/B,EAACK,EAAO,EAAEC,IAAcN,EAAAA,EAAAA,UAAS,KAEvCO,EAAAA,EAAAA,WAAU,KACKC,WACX,MAAMC,QAAgBC,EAAAA,EAAAA,IAAgB,GACtC,IAAKD,EAAS,OAEd,MAAME,EAAaC,SAASH,EAAQI,QAAQ,OAAQ,KACpDX,EAAoBS,GAEpBZ,EAAS,CACP,CACEe,KAAM,GACNC,IAAKC,EAAUL,GACfM,KAAM,EACNC,OAAQ,EACRC,WAAY,MAKlBC,IACC,IAEH,MAAMJ,EAAaK,GAAc,OAAOA,EAAEC,WAAWC,SAAS,EAAG,OAE3DC,EAAeA,CAACC,EAAeC,EAAeC,KAClD,MAAMC,GAAOC,EAAAA,EAAAA,GAAO/B,GACpB8B,EAAQH,GAAOC,GACH,SAAVA,GAA8B,QAAVA,EAAkBC,EAAQG,WAAWH,IAAoB,EAC/E5B,EAAS6B,IAsFX,OACEG,EAAAA,cAACC,EAAAA,EAAM,KACPD,EAAAA,cAAA,OAAKE,MAAO,CAAEC,QAAS,GAAIC,WAAY,UACrCJ,EAAAA,cAAA,UAAI,gBAEc,IAAjBjC,EAAMsC,OACLL,EAAAA,cAAA,SAAG,cAEHA,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAOM,OAAQ,EAAGC,YAAa,EAAGC,YAAa,GAC7CR,EAAAA,cAAA,aACEA,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAAA,UAAI,OACJA,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAAA,UAAI,UACJA,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,UAAI,aACJA,EAAAA,cAAA,UAAI,UACJA,EAAAA,cAAA,UAAI,iBACJA,EAAAA,cAAA,UAAI,OAGRA,EAAAA,cAAA,aACGjC,EAAM0C,IAAI,CAACC,EAAKC,KACf,MAAMC,EAASF,EAAIvB,OAAS,EAAIuB,EAAIxB,KAAOwB,EAAIvB,OAAS,EAClD0B,EAASH,EAAItB,WAAawB,EAC1BE,EAASF,EAAS,EAAKC,EAASD,EAAU,IAAM,EAEtD,OACEZ,EAAAA,cAAA,MAAIe,IAAKJ,GACPX,EAAAA,cAAA,UACEA,EAAAA,cAAA,SACEJ,MAAOc,EAAI3B,KACXiC,SAAUC,GAAKxB,EAAakB,EAAK,OAAQM,EAAEC,OAAOtB,UAGtDI,EAAAA,cAAA,UACEA,EAAAA,cAAA,SACEJ,MAAOc,EAAI1B,IACXgC,SAAUC,GAAKxB,EAAakB,EAAK,MAAOM,EAAEC,OAAOtB,UAGrDI,EAAAA,cAAA,UACEA,EAAAA,cAAA,SACEmB,KAAK,SACLvB,MAAOc,EAAIxB,KACX8B,SAAUC,GAAKxB,EAAakB,EAAK,OAAQM,EAAEC,OAAOtB,UAGtDI,EAAAA,cAAA,UACEA,EAAAA,cAAA,SACEmB,KAAK,SACLvB,MAAOc,EAAIvB,OACX6B,SAAUC,GAAKxB,EAAakB,EAAK,SAAUM,EAAEC,OAAOtB,UAGxDI,EAAAA,cAAA,UAAI,IAAEY,EAAOQ,QAAQ,IACrBpB,EAAAA,cAAA,UACEA,EAAAA,cAAA,SACEmB,KAAK,SACLvB,MAAOc,EAAItB,WACX4B,SAAUC,GAAKxB,EAAakB,EAAK,aAAcM,EAAEC,OAAOtB,UAG5DI,EAAAA,cAAA,UAAI,IAAEa,EAAOO,QAAQ,IACrBpB,EAAAA,cAAA,UAAKc,EAAOM,QAAQ,GAAG,KACvBpB,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAQqB,QAASA,IA3IlB3B,KACjB,MAAMG,GAAOC,EAAAA,EAAAA,GAAO/B,GACpB8B,EAAQyB,OAAO5B,EAAO,GACtB1B,EAAS6B,IAwIgC0B,CAAUZ,IAAM,WAQnDX,EAAAA,cAAA,OAAKE,MAAO,CAAEsB,UAAW,KACvBxB,EAAAA,cAAA,UAAQqB,QAhKHI,KACb,GAAyB,OAArBvD,EAA2B,OAE/B,MAAMwD,EAAY3D,EAAMsC,OAClBsB,EAAU1C,EAAUf,EAAmBwD,GAE7C1D,EAAS4D,GAAQ,GAAJC,QAAA/B,EAAAA,EAAAA,GACR8B,GAAI,CACP,CAAE7C,KAAM,GAAIC,IAAK2C,EAASzC,KAAM,EAAGC,OAAQ,EAAGC,WAAY,QAwJ3B,aAAmB,IAC5CY,EAAAA,cAAA,UAAQqB,QA/IG5C,UACnBF,EAAW,IACX,IAAIuD,GAAU,EACd,MAAMC,EAA0B,GAE1BC,EAAajE,EAAMkE,OAAO,CAAClD,EAAM4B,KACrC,MAAQ5B,KAAMmD,EAAI,IAAElD,EAAG,KAAEE,EAAI,OAAEC,GAAWJ,EAC1C,MACkB,iBAATmD,GAAqC,KAAhBA,EAAKC,QAClB,iBAARnD,GAAmC,KAAfA,EAAImD,QAC/BC,MAAMlD,IAASA,GAAQ,GACvBkD,MAAMjD,IAAWA,GAAU,GAE3B2C,GAAU,GACH,IAGe,IAApB/C,EAAKK,YACP2C,EAAcM,KAAK1B,IAGd,KAGT,GAAImB,EAEF,YADAQ,MAAM,sEAIR,GAAIP,EAAc1B,OAAS,EAAG,CAE5B,IADgBkC,QAAQ,MAAMR,EAAc1B,kDAC9B,MAChB,CAEA,MAAMmC,EAAUR,EAAWvB,IAAIgC,IAAA,IAAC,KAAE1D,EAAI,IAAEC,EAAG,KAAEE,EAAI,OAAEC,EAAM,WAAEC,GAAYqD,EAAA,MAAM,CAC3EP,KAAMnD,EACNC,MACAE,OACAC,SACAC,gBAGFf,GAAU,GAEV,IACE,MAAM,MAAEqE,SAAgBC,EAAAA,EAASC,KAAK,eAAeC,OAAOL,GAE5D,GAAIE,EAGF,OAFAI,QAAQJ,MAAM,gBAAiBA,EAAMpE,cACrCC,EAAW,YAAYmE,EAAMpE,WAK/B,MAAMyE,EAAYhF,EAAMkE,OAAOlD,IAASiD,EAAWgB,SAASjE,IAC5Df,EAAS+E,GACTxE,EAAW,KAAKiE,EAAQnC,qCAC1B,CAAE,MAAO4C,GACPH,QAAQJ,MAAM,oBAAqBO,GACnC1E,EAAW,+BACb,CAAE,QACAF,GAAU,EACZ,GAiFuC6E,SAAU9E,GACtCA,EAAS,cAAgB,iBAMjCE,GAAW0B,EAAAA,cAAA,KAAGE,MAAO,CAAEsB,UAAW,KAAOlD,IAIhD,C,6UCrNOG,eAAe0E,IACpB,MAAM,KAAEC,EAAI,MAAEV,SAAgBC,EAAAA,EAC3BC,KAAK,eACLS,OAAO,gCAEV,OAAIX,GACFI,QAAQJ,MAAM,8BAA+BA,EAAMpE,SAC5C,IAGF8E,EAAK3C,IAAI1B,IAAI,CAClBuE,IAAKvE,EAAKuE,IACVvE,KAAMA,EAAKmD,KACXlD,IAAKD,EAAKC,IACVE,KAAMa,WAAWhB,EAAKG,MACtBC,OAAQN,SAASE,EAAKI,QACtBoE,IAAK,EACLC,KAAM,IAEV,CAIO/E,eAAegF,EAAmBC,GACvC,MAAM,KAAEN,EAAI,MAAEV,SAAgBC,EAAAA,EAC3BC,KAAK,eACLS,OAAO,KACPM,GAAG,MAAOD,GACVE,SAEH,OAAIlB,GACFI,QAAQJ,MAAM,oBAAqBA,EAAMpE,SAClC,MAGF8E,CACT,CAEO3E,eAAeoF,EAAcP,EAAaQ,GAC/C,MAAM,MAAEpB,SAAgBC,EAAAA,EACrBC,KAAK,eACLmB,OAAOD,GACPH,GAAG,MAAOL,GAEb,MAAO,CAAEU,SAAUtB,EAAOA,QAC5B,CAEOjE,eAAeE,IACpB,MAAM,MAAEsF,EAAK,MAAEvB,SAAgBC,EAAAA,EAC5BC,KAAK,eACLS,OAAO,MAAO,CAAEY,MAAO,QAASC,MAAM,IAEzC,GAAIxB,EAEF,OADAI,QAAQJ,MAAM,sCAAuCA,EAAMpE,SACpD,KAMT,MAAO,SAHa2F,QAAAA,EAAS,GAAK,GAEL1E,WAAWC,SAAS,EAAG,MAEtD,CAEOf,eAAe0F,IACpB,MAAM,KAAEf,EAAI,MAAEV,SAAgBC,EAAAA,EAC3BC,KAAK,oBACLS,OAAO,aACPe,MAAM,YAAa,CAAEC,WAAW,IAEnC,OAAI3B,GACFI,QAAQJ,MAAM,uCAAwCA,EAAMpE,SACrD,IAGF8E,EAAK3C,IAAIC,GAAOA,EAAI4D,UAC7B,CAIO7F,eAAe8F,EAAuBC,GAC3C,MAAM,KAAEpB,EAAI,MAAEV,SAAgBC,EAAAA,EAC3BC,KAAK,eACLS,OAAO,qJAWPM,GAAG,YAAaa,GAEnB,GAAI9B,EAEF,OADAI,QAAQJ,MAAM,sCAAuCA,EAAMpE,SACpD,CAAEP,MAAO,GAAI0G,KAAM,MAG5B,MAAM1G,GAASqF,GAAQ,IAAI3C,IAAIC,IAAQ,IAADgE,EAAAC,EACpC,MAAM/D,EAASb,WAAWW,EAAI3B,KAAKG,MAAQwB,EAAI3B,KAAKI,OAC9CqE,EAAOzD,WAAmB,QAAT2E,EAAChE,EAAI8C,YAAI,IAAAkB,EAAAA,EAAI,GAC9BnB,EAAkB,QAAfoB,EAAGjE,EAAIkE,gBAAQ,IAAAD,EAAAA,EAAI,EACtB9D,GAAU2C,EAAO5C,GAAU2C,EAEjC,MAAO,CACLD,IAAK5C,EAAI3B,KAAKuE,IACdvE,KAAM2B,EAAI3B,KAAKmD,KACflD,IAAK0B,EAAI3B,KAAKC,IACdE,KAAMa,WAAWW,EAAI3B,KAAKG,MAC1BC,OAAQuB,EAAI3B,KAAKI,OACjByB,SACA2C,MACAC,OACA3C,aAIIuC,KAAMyB,EAAUnC,MAAOoC,SAAoBnC,EAAAA,EAChDC,KAAK,oBACLS,OAAO,yBACPM,GAAG,YAAaa,GAChBO,MAAM,GACNnB,SAMH,OAJIkB,GACFhC,QAAQJ,MAAM,mCAAoCoC,EAAUxG,SAGvD,CACLP,QACA0G,KAAMI,GAAY,KAEtB,CAGOpG,eAAeuG,EAAoBR,EAAkBzG,EAAckH,QAAM,IAANA,IAAAA,GAAS,GAEjF,MAAMC,GAAQnH,GAAS,IACpBkE,OAAOkD,GAAKA,EAAE7B,KAAwB,iBAAV6B,EAAE5B,KAAsC,iBAAX4B,EAAE3B,MAC3D/C,IAAI0E,IAAC,CACJb,UAAWE,EACXY,SAAUD,EAAE7B,IACZsB,SAAUO,EAAE5B,IAAM,EAAI4B,EAAE5B,IAAM,EAC9BC,KAAMpB,MAAM+C,EAAE3B,MAAQ,EAAIzD,WAAWoF,EAAE3B,SAG3C,GAAoB,IAAhB0B,EAAK7E,OAEP,OADAyC,QAAQuC,KAAK,iCACN,EAGT,MAAM,MAAE3C,GAAUuC,QACRtC,EAAAA,EACHC,KAAK,eACLqC,OAAOC,EAAM,CAAEI,WAAY,CAAC,YAAa,oBACtC3C,EAAAA,EACHC,KAAK,eACLC,OAAOqC,GAEd,OAAIxC,IACFI,QAAQJ,MAAM,WAAWuC,EAAS,YAAc,iCAAkCvC,EAAMpE,UACjF,EAIX,CAMOG,eAAe8G,EAAoBf,EAAkBzG,EAAcyH,GACxE,QADiF,IAATA,IAAAA,GAAY,IAC/EzH,EAAMsC,OAET,OADAyC,QAAQuC,KAAK,iCACN,EAGT,MAAM,MAAE3C,SAAgBC,EAAAA,EACrBC,KAAK,eACLqC,OAAOlH,EAAO,CAAEuH,WAAY,CAAC,YAAa,cAE7C,OAAI5C,IACFI,QAAQJ,MAAM,2BAA4BA,EAAMpE,UACzC,EAIX,CAGOG,eAAegH,EAAmBjB,EAAkB1D,EAAgB4E,GACzE,MAAM,MAAEhD,SAAgBC,EAAAA,EACrBC,KAAK,oBACLqC,OACC,CAAC,CAAEX,UAAWE,EAAU1D,SAAQ6E,cAAeD,IAC/C,CAAEJ,WAAY,CAAC,eAGnB,OAAI5C,IACFI,QAAQJ,MAAM,4CAA6CA,EAAMpE,UAC1D,EAIX,CAEOG,eAAemH,EAAoBpB,GACxC,MAAM,KAAEpB,EAAI,MAAEV,SAAgBC,EAAAA,EAC3BC,KAAK,oBACLS,OAAO,aACPM,GAAG,YAAaa,GAChBO,MAAM,GAET,OAAIrC,GACFI,QAAQJ,MAAM,4BAA6BA,EAAMpE,UAC1C,MAGC8E,GAAQA,EAAK/C,OAAS,EAClC,CAEO5B,eAAeoH,EAAoBrB,GACxC,MAAM,KAAEpB,EAAI,MAAEV,SAAgBC,EAAAA,EAC3BC,KAAK,oBACLS,OAAO,yBACPM,GAAG,YAAaa,GAChBO,MAAM,GACNnB,SAEH,OAAIlB,GACFI,QAAQJ,MAAM,mCAAoCA,EAAMpE,SACjD,MAGF8E,CACT,CAEO3E,eAAeqH,EAAiBtB,GACrC,MAAQ9B,MAAOqD,SAAoBpD,EAAAA,EAChCC,KAAK,eACLoD,SACArC,GAAG,YAAaa,IAEX9B,MAAOoC,SAAoBnC,EAAAA,EAChCC,KAAK,oBACLoD,SACArC,GAAG,YAAaa,GAEnB,OAAIuB,IAAajB,IACfhC,QAAQJ,MAAM,4BAA4BqD,aAAS,EAATA,EAAWzH,WAAWwG,aAAS,EAATA,EAAWxG,WACpE,EAIX,C,+CCpOA,IAtBemE,IAAA,IAAC,SAAEwD,GAAuBxD,EAAA,OACvCzC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OACEE,MAAO,CACLgG,QAAS,OACTC,IAAK,OACLhG,QAAS,OACTiG,WAAY,UACZC,aAAc,iBACdC,SAAU,SAIZtG,EAAAA,cAACuG,EAAAA,KAAI,CAACC,GAAG,IAAItG,MAAO,CAAEuG,YAAa,KAAM,YACzCzG,EAAAA,cAACuG,EAAAA,KAAI,CAACC,GAAG,iBAAgB,eACzBxG,EAAAA,cAACuG,EAAAA,KAAI,CAACC,GAAG,iBAAgB,eACzBxG,EAAAA,cAACuG,EAAAA,KAAI,CAACC,GAAG,gBAAe,6BAE1BxG,EAAAA,cAAA,QAAME,MAAO,CAAEC,QAAS,SAAW8F,I","sources":["webpack://slap-kommerce-web/./src/pages/item-builder/index.tsx","webpack://slap-kommerce-web/./src/tables/tables.ts","webpack://slap-kommerce-web/./src/components/Layout.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { generateNextSku } from '../../tables/tables';\nimport { supabase } from '../../supabase';\nimport Layout from '../../components/Layout';\n\n\nexport default function CreateItem() {\n  const [items, setItems] = useState<any[]>([]);\n  const [initialSkuNumber, setInitialSkuNumber] = useState<number | null>(null);\n  const [saving, setSaving] = useState(false);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const init = async () => {\n      const baseSku = await generateNextSku(0);\n      if (!baseSku) return;\n\n      const baseNumber = parseInt(baseSku.replace('SKU-', ''));\n      setInitialSkuNumber(baseNumber);\n\n      setItems([\n        {\n          item: '',\n          sku: formatSku(baseNumber),\n          bulk: 0,\n          carton: 0,\n          price_each: 0\n        }\n      ]);\n    };\n\n    init();\n  }, []);\n\n  const formatSku = (n: number) => `SKU-${n.toString().padStart(3, '0')}`;\n\n  const handleChange = (index: number, field: string, value: string | number) => {\n    const updated = [...items];\n    updated[index][field] =\n      field === 'item' || field === 'sku' ? value : parseFloat(value as string) || 0;\n    setItems(updated);\n  };\n\n  const addRow = () => {\n    if (initialSkuNumber === null) return;\n\n    const nextIndex = items.length;\n    const nextSku = formatSku(initialSkuNumber + nextIndex);\n\n    setItems(prev => [\n      ...prev,\n      { item: '', sku: nextSku, bulk: 0, carton: 0, price_each: 0 }\n    ]);\n  };\n\n  const deleteRow = (index: number) => {\n    const updated = [...items];\n    updated.splice(index, 1);\n    setItems(updated);\n  };\n\n  const saveAllItems = async () => {\n    setMessage('');\n    let invalid = false;\n    const zeroPriceRows: number[] = [];\n\n    const validItems = items.filter((item, idx) => {\n      const { item: name, sku, bulk, carton } = item;\n      if (\n        typeof name !== 'string' || name.trim() === '' ||\n        typeof sku !== 'string' || sku.trim() === '' ||\n        isNaN(bulk) || bulk <= 0 ||\n        isNaN(carton) || carton <= 0\n      ) {\n        invalid = true;\n        return false;\n      }\n\n      if (item.price_each === 0) {\n        zeroPriceRows.push(idx);\n      }\n\n      return true;\n    });\n\n    if (invalid) {\n      alert('❌ Please fill all required fields with valid values before saving.');\n      return;\n    }\n\n    if (zeroPriceRows.length > 0) {\n      const proceed = confirm(`⚠️ ${zeroPriceRows.length} item(s) have $0 price. Continue anyway?`);\n      if (!proceed) return;\n    }\n\n    const payload = validItems.map(({ item, sku, bulk, carton, price_each }) => ({\n      name: item,\n      sku,\n      bulk,\n      carton,\n      price_each\n    }));\n\n    setSaving(true);\n\n    try {\n      const { error } = await supabase.from('price_items').insert(payload);\n\n      if (error) {\n        console.error('Insert error:', error.message);\n        setMessage(`❌ Error: ${error.message}`);\n        return;\n      }\n\n      // Remove inserted items from list\n      const remaining = items.filter(item => !validItems.includes(item));\n      setItems(remaining);\n      setMessage(`✅ ${payload.length} item(s) added successfully!`);\n    } catch (err: any) {\n      console.error('Unexpected error:', err);\n      setMessage('❌ Unexpected error occurred.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <Layout>\n    <div style={{ padding: 20, fontFamily: 'Arial' }}>\n      <h2>Create Items</h2>\n\n      {items.length === 0 ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <table border={1} cellPadding={6} cellSpacing={0}>\n            <thead>\n              <tr>\n                <th>Item</th>\n                <th>SKU</th>\n                <th>Bulk</th>\n                <th>Carton</th>\n                <th>Cost Ea.</th>\n                <th>Price Ea.</th>\n                <th>Profit</th>\n                <th>Profit Margin</th>\n                <th>❌</th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map((row, idx) => {\n                const costEa = row.carton > 0 ? row.bulk / row.carton : 0;\n                const profit = row.price_each - costEa;\n                const margin = costEa > 0 ? (profit / costEa) * 100 : 0;\n\n                return (\n                  <tr key={idx}>\n                    <td>\n                      <input\n                        value={row.item}\n                        onChange={e => handleChange(idx, 'item', e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        value={row.sku}\n                        onChange={e => handleChange(idx, 'sku', e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={row.bulk}\n                        onChange={e => handleChange(idx, 'bulk', e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={row.carton}\n                        onChange={e => handleChange(idx, 'carton', e.target.value)}\n                      />\n                    </td>\n                    <td>${costEa.toFixed(2)}</td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={row.price_each}\n                        onChange={e => handleChange(idx, 'price_each', e.target.value)}\n                      />\n                    </td>\n                    <td>${profit.toFixed(2)}</td>\n                    <td>{margin.toFixed(1)}%</td>\n                    <td>\n                      <button onClick={() => deleteRow(idx)}>❌</button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n\n          <div style={{ marginTop: 16 }}>\n            <button onClick={addRow}>➕ Add Row</button>{' '}\n            <button onClick={saveAllItems} disabled={saving}>\n              {saving ? '⏳ Saving...' : '💾 Save All'}\n            </button>\n          </div>\n        </>\n      )}\n\n      {message && <p style={{ marginTop: 12 }}>{message}</p>}\n    </div>\n    </Layout>\n  );\n}\n","import { supabase } from '../supabase';\n\nexport async function fetchPriceItems() {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('uid, name, sku, bulk, carton');\n\n  if (error) {\n    console.error('Error fetching price items:', error.message);\n    return [];\n  }\n\n  return data.map(item => ({\n    uid: item.uid,\n    item: item.name,\n    sku: item.sku,\n    bulk: parseFloat(item.bulk),\n    carton: parseInt(item.carton),\n    qty: 1,\n    sell: 0\n  }));\n}\n\n\n\nexport async function fetchPriceItemById(id: string) {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('*')\n    .eq('uid', id)\n    .single();\n\n  if (error) {\n    console.error('Fetch item error:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function savePriceItem(uid: string, updates: any) {\n  const { error } = await supabase\n    .from('price_items')\n    .update(updates)\n    .eq('uid', uid);\n\n  return { success: !error, error };\n}\n\nexport async function generateNextSku() {\n  const { count, error } = await supabase\n    .from('price_items')\n    .select('uid', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error counting rows in price_items:', error.message);\n    return null;\n  }\n\n  const nextNumber = (count ?? 0) + 1;\n\n  const skuNumber = nextNumber.toString().padStart(3, '0'); // ensures 3 digits\n  return `SKU-${skuNumber}`;\n}\n\nexport async function fetchSupplyLists(): Promise<string[]> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .order('list_name', { ascending: true });\n\n  if (error) {\n    console.error('Error fetching list names from meta:', error.message);\n    return [];\n  }\n\n  return data.map(row => row.list_name);\n}\n\n\n\nexport async function fetchSupplyListDetails(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list')\n    .select(`\n      quantity,\n      sell,\n      item:price_items (\n        uid,\n        name,\n        sku,\n        bulk,\n        carton\n      )\n    `)\n    .eq('list_name', listName);\n\n  if (error) {\n    console.error('Error fetching supply list details:', error.message);\n    return { items: [], meta: null };\n  }\n\n  const items = (data || []).map(row => {\n    const costEa = parseFloat(row.item.bulk) / row.item.carton;\n    const sell = parseFloat(row.sell ?? 0);\n    const qty = row.quantity ?? 1;\n    const profit = (sell - costEa) * qty;\n\n    return {\n      uid: row.item.uid,\n      item: row.item.name,\n      sku: row.item.sku,\n      bulk: parseFloat(row.item.bulk),\n      carton: row.item.carton,\n      costEa,\n      qty,                 // ✅ Important: use 'qty' not 'quantity'\n      sell,\n      profit\n    };\n  });\n\n  const { data: metaData, error: metaError } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (metaError) {\n    console.error('Error fetching supply list meta:', metaError.message);\n  }\n\n  return {\n    items,\n    meta: metaData || null\n  };\n}\n\n\nexport async function saveSupplyListItems(listName: string, items: any[], upsert = false) {\n  // Convert to valid rows with required fields\n  const rows = (items || [])\n    .filter(i => i.uid && typeof i.qty === 'number' && typeof i.sell === 'number')\n    .map(i => ({\n      list_name: listName,\n      item_uid: i.uid, // ✅ match schema field\n      quantity: i.qty > 0 ? i.qty : 1,\n      sell: isNaN(i.sell) ? 0 : parseFloat(i.sell)\n    }));\n\n  if (rows.length === 0) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = upsert\n    ? await supabase\n        .from('supply_list')\n        .upsert(rows, { onConflict: ['list_name', 'item_uid'] })\n    : await supabase\n        .from('supply_list')\n        .insert(rows);\n\n  if (error) {\n    console.error(`❌ Error ${upsert ? 'upserting' : 'inserting'} supply list items:`, error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\n\n\n\nexport async function editSupplyListItems(listName: string, items: any[], overwrite = true) {\n  if (!items.length) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = await supabase\n    .from('supply_list')\n    .upsert(items, { onConflict: ['list_name', 'item_uid'] });\n\n  if (error) {\n    console.error('❌ Supabase upsert error:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\nexport async function saveSupplyListMeta(listName: string, margin: number, shipping: number) {\n  const { error } = await supabase\n    .from('supply_list_meta')\n    .upsert(\n      [{ list_name: listName, margin, shipping_rate: shipping }],\n      { onConflict: ['list_name'] }\n    );\n\n  if (error) {\n    console.error('❌ Supabase error saving supply_list_meta:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\nexport async function checkListNameExists(listName: string): Promise<boolean> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .eq('list_name', listName)\n    .limit(1);\n\n  if (error) {\n    console.error('Error checking list name:', error.message);\n    return false;\n  }\n\n  return !!(data && data.length > 0);\n}\n\nexport async function fetchSupplyListMeta(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (error) {\n    console.error('Error fetching supply list meta:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function deleteSupplyList(listName: string) {\n  const { error: itemError } = await supabase\n    .from('supply_list')\n    .delete()\n    .eq('list_name', listName);\n\n  const { error: metaError } = await supabase\n    .from('supply_list_meta')\n    .delete()\n    .eq('list_name', listName);\n\n  if (itemError || metaError) {\n    console.error('❌ Failed to delete list:', itemError?.message || metaError?.message);\n    return false;\n  }\n\n  return true;\n}\n","// src/components/Layout.tsx\nimport React, { ReactNode } from 'react';\nimport { Link } from 'gatsby';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst Layout = ({ children }: LayoutProps) => (\n  <>\n    <nav\n      style={{\n        display: 'flex',\n        gap: '1rem',\n        padding: '10px',\n        background: '#f0f0f0',\n        borderBottom: '1px solid #ccc',\n        flexWrap: 'wrap',\n      }}\n    >\n      {/* <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Original</Link> */}\n      <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Lists</Link> \n      <Link to=\"/list-builder\">📥 New List</Link>\n      <Link to=\"/item-builder\">📥 New Item</Link>\n      <Link to=\"/bottom-line\">📤 Average Profit Margin</Link>\n    </nav>\n    <main style={{ padding: '20px' }}>{children}</main>\n  </>\n);\n\nexport default Layout;\n"],"names":["CreateItem","items","setItems","useState","initialSkuNumber","setInitialSkuNumber","saving","setSaving","message","setMessage","useEffect","async","baseSku","generateNextSku","baseNumber","parseInt","replace","item","sku","formatSku","bulk","carton","price_each","init","n","toString","padStart","handleChange","index","field","value","updated","_toConsumableArray","parseFloat","React","Layout","style","padding","fontFamily","length","border","cellPadding","cellSpacing","map","row","idx","costEa","profit","margin","key","onChange","e","target","type","toFixed","onClick","splice","deleteRow","marginTop","addRow","nextIndex","nextSku","prev","concat","invalid","zeroPriceRows","validItems","filter","name","trim","isNaN","push","alert","confirm","payload","_ref","error","supabase","from","insert","console","remaining","includes","err","disabled","fetchPriceItems","data","select","uid","qty","sell","fetchPriceItemById","id","eq","single","savePriceItem","updates","update","success","count","head","fetchSupplyLists","order","ascending","list_name","fetchSupplyListDetails","listName","meta","_row$sell","_row$quantity","quantity","metaData","metaError","limit","saveSupplyListItems","upsert","rows","i","item_uid","warn","onConflict","editSupplyListItems","overwrite","saveSupplyListMeta","shipping","shipping_rate","checkListNameExists","fetchSupplyListMeta","deleteSupplyList","itemError","delete","children","display","gap","background","borderBottom","flexWrap","Link","to","marginRight"],"sourceRoot":""}