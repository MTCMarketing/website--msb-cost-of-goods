{"version":3,"file":"component---src-pages-index-tsx-1c863369c71e3c229205.js","mappings":"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","sources":["webpack://slap-kommerce-web/./src/tables/tables.ts","webpack://slap-kommerce-web/./src/pages/index.tsx","webpack://slap-kommerce-web/./src/components/Layout.tsx","webpack://slap-kommerce-web/./src/pages/lists/index.tsx"],"sourcesContent":["import { supabase } from '../supabase';\n\nexport async function fetchPriceItems() {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('uid, name, sku, bulk, carton');\n\n  if (error) {\n    console.error('Error fetching price items:', error.message);\n    return [];\n  }\n\n  return data.map(item => ({\n    uid: item.uid,\n    item: item.name,\n    sku: item.sku,\n    bulk: parseFloat(item.bulk),\n    carton: parseInt(item.carton),\n    qty: 1,\n    sell: 0\n  }));\n}\n\nexport async function fetchSupplyLists(): Promise<string[]> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .order('list_name', { ascending: true });\n\n  if (error) {\n    console.error('Error fetching list names from meta:', error.message);\n    return [];\n  }\n\n  return data.map(row => row.list_name);\n}\n\n\n\nexport async function fetchSupplyListDetails(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list')\n    .select(`\n      quantity,\n      sell,\n      item:price_items (\n        uid,\n        name,\n        sku,\n        bulk,\n        carton\n      )\n    `)\n    .eq('list_name', listName);\n\n  if (error) {\n    console.error('Error fetching supply list details:', error.message);\n    return { items: [], meta: null };\n  }\n\n  const items = (data || []).map(row => {\n    const costEa = parseFloat(row.item.bulk) / row.item.carton;\n    const sell = parseFloat(row.sell ?? 0);\n    const qty = row.quantity ?? 1;\n    const profit = (sell - costEa) * qty;\n\n    return {\n      uid: row.item.uid,\n      item: row.item.name,\n      sku: row.item.sku,\n      bulk: parseFloat(row.item.bulk),\n      carton: row.item.carton,\n      costEa,\n      qty,                 // ✅ Important: use 'qty' not 'quantity'\n      sell,\n      profit\n    };\n  });\n\n  const { data: metaData, error: metaError } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (metaError) {\n    console.error('Error fetching supply list meta:', metaError.message);\n  }\n\n  return {\n    items,\n    meta: metaData || null\n  };\n}\n\n\nexport async function saveSupplyListItems(listName: string, items: any[], upsert = false) {\n  // Convert to valid rows with required fields\n  const rows = (items || [])\n    .filter(i => i.uid && typeof i.qty === 'number' && typeof i.sell === 'number')\n    .map(i => ({\n      list_name: listName,\n      item_uid: i.uid, // ✅ match schema field\n      quantity: i.qty > 0 ? i.qty : 1,\n      sell: isNaN(i.sell) ? 0 : parseFloat(i.sell)\n    }));\n\n  if (rows.length === 0) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = upsert\n    ? await supabase\n        .from('supply_list')\n        .upsert(rows, { onConflict: ['list_name', 'item_uid'] })\n    : await supabase\n        .from('supply_list')\n        .insert(rows);\n\n  if (error) {\n    console.error(`❌ Error ${upsert ? 'upserting' : 'inserting'} supply list items:`, error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\n\n\n\nexport async function editSupplyListItems(listName: string, items: any[], overwrite = true) {\n  if (!items.length) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = await supabase\n    .from('supply_list')\n    .upsert(items, { onConflict: ['list_name', 'item_uid'] });\n\n  if (error) {\n    console.error('❌ Supabase upsert error:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\nexport async function saveSupplyListMeta(listName: string, margin: number, shipping: number) {\n  const { error } = await supabase\n    .from('supply_list_meta')\n    .upsert(\n      [{ list_name: listName, margin, shipping_rate: shipping }],\n      { onConflict: ['list_name'] }\n    );\n\n  if (error) {\n    console.error('❌ Supabase error saving supply_list_meta:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\nexport async function checkListNameExists(listName: string): Promise<boolean> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .eq('list_name', listName)\n    .limit(1);\n\n  if (error) {\n    console.error('Error checking list name:', error.message);\n    return false;\n  }\n\n  return !!(data && data.length > 0);\n}\n\nexport async function fetchSupplyListMeta(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (error) {\n    console.error('Error fetching supply list meta:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function deleteSupplyList(listName: string) {\n  const { error: itemError } = await supabase\n    .from('supply_list')\n    .delete()\n    .eq('list_name', listName);\n\n  const { error: metaError } = await supabase\n    .from('supply_list_meta')\n    .delete()\n    .eq('list_name', listName);\n\n  if (itemError || metaError) {\n    console.error('❌ Failed to delete list:', itemError?.message || metaError?.message);\n    return false;\n  }\n\n  return true;\n}\n","import React, { useEffect, useState } from \"react\"\nimport PriceTable from '../components/PriceTable'\nimport Layout from \"../components/Layout\"\nimport AllLists from \"./lists\"\n\nexport default () => <>\n<Layout>\n    <AllLists/>\n</Layout>\n\n\n</> //<Crud/>","// src/components/Layout.tsx\nimport React, { ReactNode } from 'react';\nimport { Link } from 'gatsby';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst Layout = ({ children }: LayoutProps) => (\n  <>\n    <nav\n      style={{\n        display: 'flex',\n        gap: '1rem',\n        padding: '10px',\n        background: '#f0f0f0',\n        borderBottom: '1px solid #ccc',\n        flexWrap: 'wrap',\n      }}\n    >\n      {/* <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Original</Link> */}\n      <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Lists</Link> \n      <Link to=\"/builder\">📥 New</Link>\n      <Link to=\"/bottom-line\">📤 Average Profit Margin</Link>\n    </nav>\n    <main style={{ padding: '20px' }}>{children}</main>\n  </>\n);\n\nexport default Layout;\n","import React, { useEffect, useState } from 'react';\n\nimport { fetchSupplyLists, deleteSupplyList } from '../../tables/tables';\nimport { navigate } from 'gatsby';\nimport Layout from '../../components/Layout';\n\nexport default function AllLists() {\n  const [lists, setLists] = useState<string[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [deleting, setDeleting] = useState<string | null>(null); // currently deleting list name\n\n\n  useEffect(() => {\n    fetchSupplyLists().then(data => {\n      setLists(data);\n      setLoading(false);\n    });\n  }, []);\n\n  const handleDelete = async (listName: string) => {\n    const confirmed = window.confirm(`Are you sure you want to delete the list \"${listName}\"?`);\n    if (!confirmed) return;\n\n    setDeleting(listName);\n    const success = await deleteSupplyList(listName);\n    setDeleting(null);\n\n    if (success) {\n      setLists(prev => prev.filter(name => name !== listName));\n      alert(`✅ \"${listName}\" deleted.`);\n    } else {\n      alert(`❌ Failed to delete \"${listName}\".`);\n    }\n  };\n\n  return (\n\n      <div style={{ padding: 20, fontFamily: 'Arial' }}>\n        <h2>All Supply Lists</h2>\n        {loading ? (\n          <p>Loading...</p>\n        ) : (\n          <table border={1} cellPadding={6} cellSpacing={0}>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>List Name</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {lists.map((name, idx) => (\n                <tr key={name}>\n                  <td>{idx + 1}</td>\n                  <td\n                    style={{\n                      cursor: deleting ? 'not-allowed' : 'pointer',\n                      color: deleting ? '#888' : 'black'\n                    }}\n                    onClick={() => {\n                      if (!deleting) navigate(`/lists/${encodeURIComponent(name)}`);\n                    }}\n                  >\n                    {name}\n                  </td>\n                  <td>\n                    <button\n                      onClick={() => handleDelete(name)}\n                      disabled={deleting === name}\n                      style={{\n                        padding: '4px 10px',\n                        background: deleting === name ? '#ccc' : 'red',\n                        color: 'white',\n                        cursor: deleting === name ? 'not-allowed' : 'pointer'\n                      }}\n                    >\n                      {deleting === name ? 'Deleting...' : 'Delete'}\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n\n  );\n}\n"],"names":["async","fetchPriceItems","data","error","supabase","from","select","console","message","map","item","uid","name","sku","bulk","parseFloat","carton","parseInt","qty","sell","fetchSupplyLists","order","ascending","row","list_name","fetchSupplyListDetails","listName","eq","items","meta","_row$sell","_row$quantity","costEa","quantity","profit","metaData","metaError","limit","single","saveSupplyListItems","upsert","rows","filter","i","item_uid","isNaN","length","warn","onConflict","insert","editSupplyListItems","overwrite","saveSupplyListMeta","margin","shipping","shipping_rate","checkListNameExists","fetchSupplyListMeta","deleteSupplyList","itemError","delete","React","Layout","AllLists","_ref","children","style","display","gap","padding","background","borderBottom","flexWrap","Link","to","marginRight","lists","setLists","useState","loading","setLoading","deleting","setDeleting","useEffect","then","fontFamily","border","cellPadding","cellSpacing","idx","key","cursor","color","onClick","navigate","encodeURIComponent","window","confirm","success","prev","alert","handleDelete","disabled"],"sourceRoot":""}