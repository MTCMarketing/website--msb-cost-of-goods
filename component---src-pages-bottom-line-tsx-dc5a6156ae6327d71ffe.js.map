{"version":3,"file":"component---src-pages-bottom-line-tsx-dc5a6156ae6327d71ffe.js","mappings":"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","sources":["webpack://slap-kommerce-web/./src/tables/tables.ts","webpack://slap-kommerce-web/./src/components/Layout.tsx","webpack://slap-kommerce-web/./src/components/BottomLine.tsx","webpack://slap-kommerce-web/./src/pages/bottom-line.tsx"],"sourcesContent":["import { supabase } from '../supabase';\n\nexport async function fetchPriceItems() {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('uid, name, sku, bulk, carton');\n\n  if (error) {\n    console.error('Error fetching price items:', error.message);\n    return [];\n  }\n\n  return data.map(item => ({\n    uid: item.uid,\n    item: item.name,\n    sku: item.sku,\n    bulk: parseFloat(item.bulk),\n    carton: parseInt(item.carton),\n    qty: 1,\n    sell: 0\n  }));\n}\n\n\n\nexport async function fetchPriceItemById(id: string) {\n  const { data, error } = await supabase\n    .from('price_items')\n    .select('*')\n    .eq('uid', id)\n    .single();\n\n  if (error) {\n    console.error('Fetch item error:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function savePriceItem(uid: string, updates: any) {\n  const { error } = await supabase\n    .from('price_items')\n    .update(updates)\n    .eq('uid', uid);\n\n  return { success: !error, error };\n}\n\nexport async function generateNextSku() {\n  const { count, error } = await supabase\n    .from('price_items')\n    .select('uid', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error counting rows in price_items:', error.message);\n    return null;\n  }\n\n  const nextNumber = (count ?? 0) + 1;\n\n  const skuNumber = nextNumber.toString().padStart(3, '0'); // ensures 3 digits\n  return `SKU-${skuNumber}`;\n}\n\nexport async function fetchSupplyLists(): Promise<string[]> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .order('list_name', { ascending: true });\n\n  if (error) {\n    console.error('Error fetching list names from meta:', error.message);\n    return [];\n  }\n\n  return data.map(row => row.list_name);\n}\n\n\n\nexport async function fetchSupplyListDetails(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list')\n    .select(`\n      quantity,\n      sell,\n      item:price_items (\n        uid,\n        name,\n        sku,\n        bulk,\n        carton\n      )\n    `)\n    .eq('list_name', listName);\n\n  if (error) {\n    console.error('Error fetching supply list details:', error.message);\n    return { items: [], meta: null };\n  }\n\n  const items = (data || []).map(row => {\n    const costEa = parseFloat(row.item.bulk) / row.item.carton;\n    const sell = parseFloat(row.sell ?? 0);\n    const qty = row.quantity ?? 1;\n    const profit = (sell - costEa) * qty;\n\n    return {\n      uid: row.item.uid,\n      item: row.item.name,\n      sku: row.item.sku,\n      bulk: parseFloat(row.item.bulk),\n      carton: row.item.carton,\n      costEa,\n      qty,                 // ✅ Important: use 'qty' not 'quantity'\n      sell,\n      profit\n    };\n  });\n\n  const { data: metaData, error: metaError } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (metaError) {\n    console.error('Error fetching supply list meta:', metaError.message);\n  }\n\n  return {\n    items,\n    meta: metaData || null\n  };\n}\n\n\nexport async function saveSupplyListItems(listName: string, items: any[], upsert = false) {\n  // Convert to valid rows with required fields\n  const rows = (items || [])\n    .filter(i => i.uid && typeof i.qty === 'number' && typeof i.sell === 'number')\n    .map(i => ({\n      list_name: listName,\n      item_uid: i.uid, // ✅ match schema field\n      quantity: i.qty > 0 ? i.qty : 1,\n      sell: isNaN(i.sell) ? 0 : parseFloat(i.sell)\n    }));\n\n  if (rows.length === 0) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = upsert\n    ? await supabase\n        .from('supply_list')\n        .upsert(rows, { onConflict: ['list_name', 'item_uid'] })\n    : await supabase\n        .from('supply_list')\n        .insert(rows);\n\n  if (error) {\n    console.error(`❌ Error ${upsert ? 'upserting' : 'inserting'} supply list items:`, error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\n\n\n\nexport async function editSupplyListItems(listName: string, items: any[], overwrite = true) {\n  if (!items.length) {\n    console.warn('⚠️ No valid items to upsert.');\n    return false;\n  }\n\n  const { error } = await supabase\n    .from('supply_list')\n    .upsert(items, { onConflict: ['list_name', 'item_uid'] });\n\n  if (error) {\n    console.error('❌ Supabase upsert error:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\n\nexport async function saveSupplyListMeta(listName: string, margin: number, shipping: number) {\n  const { error } = await supabase\n    .from('supply_list_meta')\n    .upsert(\n      [{ list_name: listName, margin, shipping_rate: shipping }],\n      { onConflict: ['list_name'] }\n    );\n\n  if (error) {\n    console.error('❌ Supabase error saving supply_list_meta:', error.message);\n    return false;\n  }\n\n  return true;\n}\n\nexport async function checkListNameExists(listName: string): Promise<boolean> {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('list_name')\n    .eq('list_name', listName)\n    .limit(1);\n\n  if (error) {\n    console.error('Error checking list name:', error.message);\n    return false;\n  }\n\n  return !!(data && data.length > 0);\n}\n\nexport async function fetchSupplyListMeta(listName: string) {\n  const { data, error } = await supabase\n    .from('supply_list_meta')\n    .select('margin, shipping_rate')\n    .eq('list_name', listName)\n    .limit(1)\n    .single();\n\n  if (error) {\n    console.error('Error fetching supply list meta:', error.message);\n    return null;\n  }\n\n  return data;\n}\n\nexport async function deleteSupplyList(listName: string) {\n  const { error: itemError } = await supabase\n    .from('supply_list')\n    .delete()\n    .eq('list_name', listName);\n\n  const { error: metaError } = await supabase\n    .from('supply_list_meta')\n    .delete()\n    .eq('list_name', listName);\n\n  if (itemError || metaError) {\n    console.error('❌ Failed to delete list:', itemError?.message || metaError?.message);\n    return false;\n  }\n\n  return true;\n}\n","// src/components/Layout.tsx\nimport React, { ReactNode } from 'react';\nimport { Link } from 'gatsby';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst Layout = ({ children }: LayoutProps) => (\n  <>\n    <nav\n      style={{\n        display: 'flex',\n        gap: '1rem',\n        padding: '10px',\n        background: '#f0f0f0',\n        borderBottom: '1px solid #ccc',\n        flexWrap: 'wrap',\n      }}\n    >\n      {/* <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Original</Link> */}\n      <Link to=\"/\" style={{ marginRight: 10 }}>✍️ Lists</Link> \n      <Link to=\"/list-builder\">📥 New List</Link>\n      <Link to=\"/item-builder\">📥 New Item</Link>\n      <Link to=\"/bottom-line\">📤 Average Profit Margin</Link>\n    </nav>\n    <main style={{ padding: '20px' }}>{children}</main>\n  </>\n);\n\nexport default Layout;\n","import React, { useEffect, useState } from 'react';\nimport { navigate } from 'gatsby';\nimport { fetchSupplyLists, fetchSupplyListDetails } from '../tables/tables';\nimport Layout from './Layout';\n\ninterface ListMetrics {\n  expenses: number;\n  revenue: number;\n  profit: number;\n  margin: number;\n}\n\nexport default function AllLists() {\n  const [lists, setLists] = useState<string[]>([]);\n  const [metrics, setMetrics] = useState<Record<string, ListMetrics>>({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async () => {\n      const listNames = await fetchSupplyLists();\n      setLists(listNames);\n\n      const metricsData: Record<string, ListMetrics> = {};\n\n      await Promise.all(\n        listNames.map(async name => {\n          const details = await fetchSupplyListDetails(name);\n\n          const items = details.items || [];\n\n          let expenses = 0;\n          let revenue = 0;\n          let profit = 0;\n\n          items.forEach((item: any) => {\n            const costEa = item.bulk / item.carton;\n            expenses += costEa * item.qty;\n            revenue += item.sell * item.qty;\n            profit += (item.sell - costEa) * item.qty;\n          });\n\n          const margin = revenue > 0 ? (profit / revenue) * 100 : 0;\n\n          metricsData[name] = {\n            expenses,\n            revenue,\n            profit,\n            margin,\n          };\n        })\n      );\n\n      setMetrics(metricsData);\n      setLoading(false);\n    };\n\n    loadData();\n  }, []);\n\n  const totalProfit = Object.values(metrics).reduce((acc, m) => acc + m.profit, 0);\n  const averageProfit = lists.length > 0 ? totalProfit / lists.length : 0;\n\n  const totalMargin = Object.values(metrics).reduce((acc, m) => acc + m.margin, 0);\n  const averageMargin = lists.length > 0 ? totalMargin / lists.length : 0;\n\n  return (\n    <Layout>\n      <div style={{ padding: 20, fontFamily: 'Arial' }}>\n        <h2>All Supply Lists</h2>\n        {loading ? (\n          <p>Loading...</p>\n        ) : (\n          <table border={1} cellPadding={6} cellSpacing={0}>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>List Name</th>\n                <th>Expenses</th>\n                <th>Revenue</th>\n                <th>Profit</th>\n                <th>Current Margin (%)</th>\n              </tr>\n            </thead>\n            <tbody>\n              {lists.map((name, idx) => {\n                const data = metrics[name];\n                return (\n                  <tr key={name}>\n                    <td>{idx + 1}</td>\n                    <td\n                      style={{ cursor: 'pointer', color: 'black' }}\n                      onClick={() => navigate(`/lists/${encodeURIComponent(name)}`)}\n                    >\n                      {name}\n                    </td>\n                    <td>${data.expenses.toFixed(2)}</td>\n                    <td>${data.revenue.toFixed(2)}</td>\n                    <td>${data.profit.toFixed(2)}</td>\n                    <td>{data.margin.toFixed(2)}%</td>\n                  </tr>\n                );\n              })}\n              <tr>\n                <td colSpan={4}><strong>Average Profit</strong></td>\n                <td colSpan={2}><strong>${averageProfit.toFixed(2)}</strong></td>\n              </tr>\n              <tr>\n                <td colSpan={4}><strong>Average Margin</strong></td>\n                <td colSpan={2}><strong>{averageMargin.toFixed(2)}%</strong></td>\n              </tr>\n            </tbody>\n          </table>\n        )}\n      </div>\n    </Layout>\n  );\n}\n","import React from 'react'\nimport BottomLine from \"../components/BottomLine\";\n\nexport default () => <BottomLine/>"],"names":["async","fetchPriceItems","data","error","supabase","from","select","console","message","map","item","uid","name","sku","bulk","parseFloat","carton","parseInt","qty","sell","fetchPriceItemById","id","eq","single","savePriceItem","updates","update","success","generateNextSku","count","head","toString","padStart","fetchSupplyLists","order","ascending","row","list_name","fetchSupplyListDetails","listName","items","meta","_row$sell","_row$quantity","costEa","quantity","profit","metaData","metaError","limit","saveSupplyListItems","upsert","rows","filter","i","item_uid","isNaN","length","warn","onConflict","insert","editSupplyListItems","overwrite","saveSupplyListMeta","margin","shipping","shipping_rate","checkListNameExists","fetchSupplyListMeta","deleteSupplyList","itemError","delete","_ref","children","React","style","display","gap","padding","background","borderBottom","flexWrap","Link","to","marginRight","AllLists","lists","setLists","useState","metrics","setMetrics","loading","setLoading","useEffect","listNames","metricsData","Promise","all","expenses","revenue","forEach","loadData","totalProfit","Object","values","reduce","acc","m","averageProfit","totalMargin","averageMargin","Layout","fontFamily","border","cellPadding","cellSpacing","idx","key","cursor","color","onClick","navigate","encodeURIComponent","toFixed","colSpan","BottomLine"],"sourceRoot":""}